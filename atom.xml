<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Airshelf&#39;s Blog</title>
  
  
  <link href="http://airshelf.github.io/atom.xml" rel="self"/>
  
  <link href="http://airshelf.github.io/"/>
  <updated>2022-01-25T08:25:22.190Z</updated>
  <id>http://airshelf.github.io/</id>
  
  <author>
    <name>Airshelf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内核强删文件</title>
    <link href="http://airshelf.github.io/2022/01/25/StrongDel/"/>
    <id>http://airshelf.github.io/2022/01/25/StrongDel/</id>
    <published>2022-01-25T08:23:35.000Z</published>
    <updated>2022-01-25T08:25:22.190Z</updated>
    
    <content type="html"><![CDATA[<p>简述原理：</p><p>通过修改文件对象的DeleteAccess属性，可以完成windows下被占用文件的强制删除。</p><pre><code>#include &lt;ntifs.h&gt;BOOLEAN ForceDelete(wchar_t* Path)&#123;    HANDLE hFile;    UNICODE_STRING uPath;    OBJECT_ATTRIBUTES oaFileObject;    IO_STATUS_BLOCK ioBlock;    DEVICE_OBJECT* device = 0;    PEPROCESS peProc = PsGetCurrentProcess();    //R3 Context    KeAttachProcess(peProc);    RtlInitUnicodeString(&amp;uPath, Path); // copy path to a unicode string    InitializeObjectAttributes(&amp;oaFileObject, &amp;uPath, OBJ_CASE_INSENSITIVE, 0, 0);    NTSTATUS result = IoCreateFileSpecifyDeviceObjectHint(        &amp;hFile,        SYNCHRONIZE | FILE_WRITE_ATTRIBUTES | FILE_READ_ATTRIBUTES | FILE_READ_DATA,        &amp;oaFileObject,        &amp;ioBlock,        0,        0,        FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,        FILE_OPEN,        FILE_NON_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_ALERT,        0,        0,        CreateFileTypeNone,        0,        IO_IGNORE_SHARE_ACCESS_CHECK,        device    );    if (!NT_SUCCESS(result))    &#123;        DbgPrintEx(0, 0, &quot;\nIoCreateFileSpecifyDeviceObjectHint Failed...&quot;);        ZwClose(hFile);        KeDetachProcess();        return FALSE;    &#125;    PVOID object = 0;    result = ObReferenceObjectByHandle(hFile, 0, 0, 0, &amp;object, 0);    if (!NT_SUCCESS(result))    &#123;        DbgPrintEx(0, 0, &quot;\nObReferenceObjectByHandle Failed...&quot;);        ZwClose(hFile);        KeDetachProcess();        return FALSE;    &#125;    //CopyPasta    ((FILE_OBJECT*)object)-&gt;SectionObjectPointer-&gt;ImageSectionObject = 0;    ((FILE_OBJECT*)object)-&gt;DeleteAccess = 1; // Remove all access, might give access denied for higher altitude    result = ZwDeleteFile(&amp;oaFileObject);    ObDereferenceObject(object);    ZwClose(hFile);    if (!NT_SUCCESS(result))    &#123;        DbgPrintEx(0, 0, &quot;\nZwDeleteFile Failed...&quot;);        ZwClose(hFile);        KeDetachProcess();        return FALSE;    &#125;    result = ZwDeleteFile(&amp;oaFileObject);    if (NT_SUCCESS(result))    &#123;        KeDetachProcess();        return TRUE;    &#125;&#125;VOID DrivUnload(PDRIVER_OBJECT DriverObject)&#123;    KdPrintEx((77, 0, &quot;[+] Driver Unload\r\n&quot;));&#125;NTSTATUS DriverEntry(PDRIVER_OBJECT pDriver, PUNICODE_STRING pReg)&#123;    //DbgBreakPoint();    pDriver-&gt;DriverUnload = DrivUnload;    KdPrintEx((77, 0, &quot;[+] Driver Loaded\r\n&quot;));    ForceDelete(L&quot;\\??\\C:\\Users\\admin\\Desktop\\TestBox.exe&quot;);    return STATUS_SUCCESS;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简述原理：&lt;/p&gt;
&lt;p&gt;通过修改文件对象的DeleteAccess属性，可以完成windows下被占用文件的强制删除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;ntifs.h&amp;gt;

BOOLEAN ForceDelete(wchar_t* Path)
</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>NoAccess代码保护方法</title>
    <link href="http://airshelf.github.io/2022/01/17/NoAccessProtection/"/>
    <id>http://airshelf.github.io/2022/01/17/NoAccessProtection/</id>
    <published>2022-01-17T07:51:14.000Z</published>
    <updated>2022-01-17T08:07:45.993Z</updated>
    
    <content type="html"><![CDATA[<p>简述一下实现方式，</p><ol><li><p>随机生成一字节密钥</p></li><li><p>设置NoAccess异常的handler</p></li><li><p>加密.text段、并设置.text段内存为NoAccess</p></li><li><p>运行程序</p></li><li><p>触发NoAccess异常，进入handler</p></li><li><p>在handler中解密内存页并恢复内存执行属性</p></li><li><p>恢复并继续执行代码</p></li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"protect.h"</span></span><span class="token keyword">void</span> <span class="token function">test_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HELLO FROM .text func!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">pragma</span> optimize("", off) </span><span class="token comment" spellcheck="true">//Disable it so it doesn't get inlined</span><span class="token macro property">#<span class="token directive keyword">pragma</span> section(".0dev", execute, read, write) </span><span class="token comment" spellcheck="true">//Write so we can erase encryption func</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker,"/SECTION:.0dev,ERW")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> code_seg(push, ".0dev")</span>uint8_t encryption_key<span class="token punctuation">;</span>PIMAGE_SECTION_HEADER <span class="token function">get_section_by_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    uint64_t modulebase <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_NT_HEADERS64 nt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>modulebase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>modulebase<span class="token punctuation">)</span><span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_SECTION_HEADER section <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nt<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>NumberOfSections<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>section<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">_stricmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>section<span class="token operator">-></span>Name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> section<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">encrypt_section</span><span class="token punctuation">(</span>PIMAGE_SECTION_HEADER section<span class="token punctuation">)</span> <span class="token punctuation">{</span>    uint64_t modulebase <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valid_page_count <span class="token operator">=</span> section<span class="token operator">-></span>Misc<span class="token punctuation">.</span>VirtualSize <span class="token operator">/</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//If section is smaller than page size skip it</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> page_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> page_idx <span class="token operator">&lt;</span> valid_page_count<span class="token punctuation">;</span> page_idx<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        uintptr_t address <span class="token operator">=</span> modulebase <span class="token operator">+</span> section<span class="token operator">-></span>VirtualAddress <span class="token operator">+</span> page_idx <span class="token operator">*</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Encrypted: %p\n"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>        DWORD old<span class="token punctuation">;</span>        <span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>address<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> off <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> off <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>address <span class="token operator">+</span> off<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">_rotr8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>address <span class="token operator">+</span> off<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">^</span> encryption_key<span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>address<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PAGE_NOACCESS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>bool <span class="token function">rip_in_legit_module</span><span class="token punctuation">(</span>uint64_t rip<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PPEB peb <span class="token operator">=</span> <span class="token punctuation">(</span>PPEB<span class="token punctuation">)</span><span class="token function">__readgsqword</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PPEB_LDR_DATA ldr <span class="token operator">=</span> peb<span class="token operator">-></span>Ldr<span class="token punctuation">;</span>    PLDR_DATA_TABLE_ENTRY module <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PLIST_ENTRY list <span class="token operator">=</span> ldr<span class="token operator">-></span>InMemoryOrderModuleList<span class="token punctuation">.</span>Flink<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> list <span class="token operator">!=</span> <span class="token operator">&amp;</span>ldr<span class="token operator">-></span>InMemoryOrderModuleList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        module <span class="token operator">=</span> <span class="token function">CONTAINING_RECORD</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> LDR_DATA_TABLE_ENTRY<span class="token punctuation">,</span> InMemoryOrderLinks<span class="token punctuation">)</span><span class="token punctuation">;</span>        PIMAGE_NT_HEADERS nt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>module<span class="token operator">-></span>DllBase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>module<span class="token operator">-></span>DllBase<span class="token punctuation">)</span><span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rip <span class="token operator">>=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>module<span class="token operator">-></span>DllBase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rip <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>module<span class="token operator">-></span>DllBase <span class="token operator">+</span> nt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>SizeOfImage<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        list <span class="token operator">=</span> list<span class="token operator">-></span>Flink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>LONG WINAPI <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> _EXCEPTION_POINTERS<span class="token operator">*</span> ExceptionInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ExceptionInfo<span class="token operator">-></span>ExceptionRecord<span class="token operator">-></span>ExceptionCode <span class="token operator">==</span> EXCEPTION_ACCESS_VIOLATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DWORD old<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ExceptionInformation[1] holds the invalid referenced memory address</span>        uint64_t page_start <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>ExceptionInfo<span class="token operator">-></span>ExceptionRecord<span class="token operator">-></span>ExceptionInformation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        page_start <span class="token operator">=</span> page_start <span class="token operator">-</span> <span class="token punctuation">(</span>page_start <span class="token operator">%</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Before we decrypt our page we want to verify the RIP that caused the violation. If it's not valid someone trys to forcefully decrypt the pages</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rip_in_legit_module</span><span class="token punctuation">(</span>ExceptionInfo<span class="token operator">-></span>ContextRecord<span class="token operator">-></span>Rip<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> EXCEPTION_CONTINUE_SEARCH<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Force crash the program</span>        <span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>page_start<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set write protection to decrypt</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> off <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> off <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page_start <span class="token operator">+</span> off<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">_rotl8</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page_start <span class="token operator">+</span> off<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">)</span> <span class="token operator">^</span> encryption_key<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>page_start<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PAGE_EXECUTE_READ<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set original protection</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Decrypted %p rip %p\n"</span><span class="token punctuation">,</span> page_start<span class="token punctuation">,</span> ExceptionInfo<span class="token operator">-></span>ContextRecord<span class="token operator">-></span>Rip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXCEPTION_CONTINUE_EXECUTION<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> EXCEPTION_CONTINUE_SEARCH<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> protect<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    encryption_key <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generate a small decryption key</span>    <span class="token function">AddVectoredExceptionHandler</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Handler will handle decryption and access rights</span>    <span class="token function">encrypt_section</span><span class="token punctuation">(</span><span class="token function">get_section_by_name</span><span class="token punctuation">(</span><span class="token string">".text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//We won't use memset since this will unnecessarily decrypt a page</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>rip_in_legit_module <span class="token operator">-</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>encrypt_section<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>encrypt_section <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Tests 1: Dereference an address that has NO_ACCESS</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>test_func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Tests 2: Call a func that in a NO_ACCESS region</span>    <span class="token function">test_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">pragma</span> code_seg(pop, ".0dev")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> optimize("", on)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保护时：</p><p><img src="/2022/01/17/NoAccessProtection/image.png" alt="image.png"></p><p>执行时：</p><p><img src="/2022/01/17/NoAccessProtection/image2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简述一下实现方式，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;随机生成一字节密钥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置NoAccess异常的handler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加密.text段、并设置.text段内存为NoAccess&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>申请隐蔽的可执行内存</title>
    <link href="http://airshelf.github.io/2021/12/14/AllocExecMemory/"/>
    <id>http://airshelf.github.io/2021/12/14/AllocExecMemory/</id>
    <published>2021-12-14T02:12:05.000Z</published>
    <updated>2021-12-14T02:18:01.759Z</updated>
    
    <content type="html"><![CDATA[<p>原理：直接从R0修改PDE，PTE的属性，将no_execute属性修改为0</p><p>支持64位 win7\win10 </p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Memory.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> PTE_BASE 0xFFFFF68000000000ull</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> HardwarePteX64 <span class="token punctuation">{</span>    ULONG64 valid <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//!&lt; [0]</span>    ULONG64 write <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//!&lt; [1]</span>    ULONG64 owner <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//!&lt; [2]</span>    ULONG64 write_through <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//!&lt; [3]</span>    ULONG64 cache_disable <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//!&lt; [4]</span>    ULONG64 accessed <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//!&lt; [5]</span>    ULONG64 dirty <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//!&lt; [6]</span>    ULONG64 large_page <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//!&lt; [7]</span>    ULONG64 global <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//!&lt; [8]</span>    ULONG64 copy_on_write <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//!&lt; [9]</span>    ULONG64 prototype <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//!&lt; [10]</span>    ULONG64 reserved0 <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//!&lt; [11]</span>    ULONG64 page_frame_number <span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//!&lt; [12:47]</span>    ULONG64 reserved1 <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//!&lt; [48:51]</span>    ULONG64 software_ws_index <span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//!&lt; [52:62]</span>    ULONG64 no_execute <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//!&lt; [63]</span><span class="token punctuation">}</span>HardwarePte<span class="token punctuation">,</span> <span class="token operator">*</span>PHardwarePte<span class="token punctuation">;</span>ULONG64 <span class="token function">GetPTEBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> ULONG64 pteBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pteBase<span class="token punctuation">)</span> <span class="token keyword">return</span> pteBase<span class="token punctuation">;</span>    RTL_OSVERSIONINFOEXW version <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">RtlGetVersion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*         Windows 10（20H2）    19042         Windows 10（2004)  19041         Windows 10（1909）    18363         Windows 10（1903）    18362         Windows 10（1809）    17763         Windows 10（1803）    17134         Windows 10（1709）    16299         Windows 10（1703）    15063         Windows 10（1607）    14393         Windows 10（1511）    10586         Windows 10    (1507)    10240                  Windows 8.1（更新1）    MajorVersion = 6 MinorVersion = 3 BuildNumber = 9600         Windows 8.1            MajorVersion = 6 MinorVersion = 3 BuildNumber = 9200         Windows 8                MajorVersion = 6 MinorVersion = 2 BuildNumber = 9200    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span>dwBuildNumber <span class="token operator">==</span> <span class="token number">7600</span> <span class="token operator">||</span> version<span class="token punctuation">.</span>dwBuildNumber <span class="token operator">==</span> <span class="token number">7601</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pteBase <span class="token operator">=</span> PTE_BASE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span>dwBuildNumber <span class="token operator">></span> <span class="token number">14393</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取PTE</span>        UNICODE_STRING unName <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">RtlInitUnicodeString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unName<span class="token punctuation">,</span>L<span class="token string">"MmGetVirtualForPhysical"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PUCHAR func <span class="token operator">=</span> <span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span><span class="token function">MmGetSystemRoutineAddress</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unName<span class="token punctuation">)</span><span class="token punctuation">;</span>        pteBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG64<span class="token punctuation">)</span><span class="token punctuation">(</span>func <span class="token operator">+</span> <span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>        pteBase <span class="token operator">=</span> PTE_BASE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pteBase<span class="token punctuation">;</span><span class="token punctuation">}</span>ULONG64 <span class="token function">GetPte</span><span class="token punctuation">(</span>ULONG64 VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG64 pteBase <span class="token operator">=</span> <span class="token function">GetPTEBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>VirtualAddress <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFFF8</span><span class="token punctuation">)</span> <span class="token operator">+</span> pteBase<span class="token punctuation">;</span><span class="token punctuation">}</span>ULONG64 <span class="token function">GetPde</span><span class="token punctuation">(</span>ULONG64 VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG64 pteBase <span class="token operator">=</span> <span class="token function">GetPTEBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG64 pte <span class="token operator">=</span> <span class="token function">GetPte</span><span class="token punctuation">(</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFFF8</span><span class="token punctuation">)</span> <span class="token operator">+</span> pteBase<span class="token punctuation">;</span><span class="token punctuation">}</span>ULONG64 <span class="token function">GetPdpte</span><span class="token punctuation">(</span>ULONG64 VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG64 pteBase <span class="token operator">=</span> <span class="token function">GetPTEBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG64 pde <span class="token operator">=</span> <span class="token function">GetPde</span><span class="token punctuation">(</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pde <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFFF8</span><span class="token punctuation">)</span> <span class="token operator">+</span> pteBase<span class="token punctuation">;</span><span class="token punctuation">}</span>ULONG64 <span class="token function">GetPml4e</span><span class="token punctuation">(</span>ULONG64 VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG64 pteBase <span class="token operator">=</span> <span class="token function">GetPTEBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG64 ppe <span class="token operator">=</span> <span class="token function">GetPdpte</span><span class="token punctuation">(</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ppe <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFFF8</span><span class="token punctuation">)</span> <span class="token operator">+</span> pteBase<span class="token punctuation">;</span><span class="token punctuation">}</span>BOOLEAN <span class="token function">SetExecutePage</span><span class="token punctuation">(</span>ULONG64 VirtualAddress<span class="token punctuation">,</span> ULONG size<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG64 endAddress <span class="token operator">=</span> <span class="token punctuation">(</span>VirtualAddress <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0xFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG64 startAddress <span class="token operator">=</span> VirtualAddress <span class="token operator">&amp;</span>  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0xFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>endAddress <span class="token operator">>=</span> startAddress<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PHardwarePte pde <span class="token operator">=</span>  <span class="token function">GetPde</span><span class="token punctuation">(</span>startAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>pde<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pde<span class="token operator">-></span>valid<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pde<span class="token operator">-></span>no_execute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            pde<span class="token operator">-></span>write <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PHardwarePte pte <span class="token operator">=</span> <span class="token function">GetPte</span><span class="token punctuation">(</span>startAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>pte<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pte<span class="token operator">-></span>valid<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pte<span class="token operator">-></span>no_execute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            pte<span class="token operator">-></span>write <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">DbgPrintEx</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:pde %llx pte %llx %d\r\n"</span><span class="token punctuation">,</span> pde<span class="token punctuation">,</span> pte<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        startAddress <span class="token operator">+</span><span class="token operator">=</span> PAGE_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span>PVOID <span class="token function">AllocateMemory</span><span class="token punctuation">(</span>HANDLE pid<span class="token punctuation">,</span> SIZE_T size<span class="token punctuation">)</span><span class="token punctuation">{</span>    PEPROCESS Process <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    KAPC_STATE kApcState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    PVOID BaseAddress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NTSTATUS status <span class="token operator">=</span> <span class="token function">PsLookupProcessByProcessId</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PsGetProcessExitStatus</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span> <span class="token operator">!=</span> STATUS_PENDING<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">KeStackAttachProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kApcState<span class="token punctuation">)</span><span class="token punctuation">;</span>    status <span class="token operator">=</span> <span class="token function">ZwAllocateVirtualMemory</span><span class="token punctuation">(</span><span class="token function">NtCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>BaseAddress<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token function">memset</span><span class="token punctuation">(</span>BaseAddress<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetExecutePage</span><span class="token punctuation">(</span>BaseAddress<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">KeUnstackDetachProcess</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kApcState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> BaseAddress<span class="token punctuation">;</span><span class="token punctuation">}</span>NTSTATUS <span class="token function">FreeMemory</span><span class="token punctuation">(</span>HANDLE pid<span class="token punctuation">,</span> PVOID BaseAddress<span class="token punctuation">,</span> SIZE_T size<span class="token punctuation">)</span><span class="token punctuation">{</span>    PEPROCESS Process <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    KAPC_STATE kApcState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    NTSTATUS status <span class="token operator">=</span> <span class="token function">PsLookupProcessByProcessId</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> STATUS_NOT_FOUND<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PsGetProcessExitStatus</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span> <span class="token operator">!=</span> STATUS_PENDING<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> STATUS_UNSUCCESSFUL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">KeStackAttachProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kApcState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseAddress<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        status <span class="token operator">=</span> <span class="token function">ZwFreeVirtualMemory</span><span class="token punctuation">(</span><span class="token function">NtCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>BaseAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">,</span> MEM_RELEASE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">KeUnstackDetachProcess</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kApcState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><p><img src="/2021/12/14/AllocExecMemory/image.png" alt="image.png"></p><p>效果如图：</p><p><img src="/2021/12/14/AllocExecMemory/image2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原理：直接从R0修改PDE，PTE的属性，将no_execute属性修改为0&lt;/p&gt;
&lt;p&gt;支持64位 win7\win10 &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>内核枚举进程内存属性</title>
    <link href="http://airshelf.github.io/2021/11/10/VADList/"/>
    <id>http://airshelf.github.io/2021/11/10/VADList/</id>
    <published>2021-11-10T02:48:07.000Z</published>
    <updated>2021-11-10T02:51:10.544Z</updated>
    
    <content type="html"><![CDATA[<p>通过遍历VadRoot结构，可以得到一个进程所持有的虚拟内存信息</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span><span class="token keyword">struct</span> _MMVAD_FLAGS2<span class="token punctuation">{</span>    ULONG FileOffset <span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//0x0</span>    ULONG SecNoChange <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//0x0</span>    ULONG OneSecured <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                     <span class="token comment" spellcheck="true">//0x0</span>    ULONG MultipleSecured <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//0x0</span>    ULONG Spare <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                          <span class="token comment" spellcheck="true">//0x0</span>    ULONG LongVad <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        <span class="token comment" spellcheck="true">//0x0</span>    ULONG ExtendableFile <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">//0x0</span>    ULONG Inherit <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                        <span class="token comment" spellcheck="true">//0x0</span>    ULONG CopyOnWrite <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//0x0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> _MMVAD_FLAGS3<span class="token punctuation">{</span>    ULONG PreferredNode <span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">//0x0</span>    ULONG Teb <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                            <span class="token comment" spellcheck="true">//0x0</span>    ULONG Spare <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                          <span class="token comment" spellcheck="true">//0x0</span>    ULONG SequentialAccess <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//0x0</span>    ULONG LastSequentialTrim <span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//0x0</span>    ULONG Spare2 <span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">;</span>                                                         <span class="token comment" spellcheck="true">//0x0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> _EX_PUSH_LOCK<span class="token punctuation">{</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span>        <span class="token punctuation">{</span>            ULONG Locked <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">//0x0</span>            ULONG Waiting <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//0x0</span>            ULONG Waking <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                 <span class="token comment" spellcheck="true">//0x0</span>            ULONG MultipleShared <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">//0x0</span>            ULONG Shared <span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//0x0</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ULONG Value<span class="token punctuation">;</span>                                                        <span class="token comment" spellcheck="true">//0x0</span>        VOID<span class="token operator">*</span> Ptr<span class="token punctuation">;</span>                                                          <span class="token comment" spellcheck="true">//0x0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> _MMVAD_FLAGS<span class="token punctuation">{</span>    ULONG CommitCharge <span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">//0x0</span>    ULONG NoChange <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                       <span class="token comment" spellcheck="true">//0x0</span>    ULONG VadType <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>                                                        <span class="token comment" spellcheck="true">//0x0</span>    ULONG MemCommit <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                      <span class="token comment" spellcheck="true">//0x0</span>    ULONG Protection <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span>                                                     <span class="token comment" spellcheck="true">//0x0</span>    ULONG Spare <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>                                                          <span class="token comment" spellcheck="true">//0x0</span>    ULONG PrivateMemory <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">//0x0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _MMVAD<span class="token punctuation">{</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        LONG Balance <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>                                                     <span class="token comment" spellcheck="true">//0x0</span>        <span class="token keyword">struct</span> _MMVAD<span class="token operator">*</span> Parent<span class="token punctuation">;</span>                                              <span class="token comment" spellcheck="true">//0x0</span>    <span class="token punctuation">}</span> u1<span class="token punctuation">;</span>                                                                   <span class="token comment" spellcheck="true">//0x0</span>    <span class="token keyword">struct</span> _MMVAD<span class="token operator">*</span> LeftChild<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//0x4</span>    <span class="token keyword">struct</span> _MMVAD<span class="token operator">*</span> RightChild<span class="token punctuation">;</span>                                              <span class="token comment" spellcheck="true">//0x8</span>    ULONG StartingVpn<span class="token punctuation">;</span>                                                      <span class="token comment" spellcheck="true">//0xc</span>    ULONG EndingVpn<span class="token punctuation">;</span>                                                        <span class="token comment" spellcheck="true">//0x10</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        ULONG LongFlags<span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//0x14</span>        <span class="token keyword">struct</span> _MMVAD_FLAGS VadFlags<span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//0x14</span>    <span class="token punctuation">}</span> u<span class="token punctuation">;</span>                                                                    <span class="token comment" spellcheck="true">//0x14</span>    <span class="token keyword">struct</span> _EX_PUSH_LOCK PushLock<span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">//0x18</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        ULONG LongFlags3<span class="token punctuation">;</span>                                                   <span class="token comment" spellcheck="true">//0x1c</span>        <span class="token keyword">struct</span> _MMVAD_FLAGS3 VadFlags3<span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">//0x1c</span>    <span class="token punctuation">}</span> u5<span class="token punctuation">;</span>                                                                   <span class="token comment" spellcheck="true">//0x1c</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        ULONG LongFlags2<span class="token punctuation">;</span>                                                   <span class="token comment" spellcheck="true">//0x20</span>        <span class="token keyword">struct</span> _MMVAD_FLAGS2 VadFlags2<span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">//0x20</span>    <span class="token punctuation">}</span> u2<span class="token punctuation">;</span>                                                                   <span class="token comment" spellcheck="true">//0x20</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> _SUBSECTION<span class="token operator">*</span> Subsection<span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">//0x24</span>        <span class="token keyword">struct</span> _MSUBSECTION<span class="token operator">*</span> MappedSubsection<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//0x24</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> _MMPTE<span class="token operator">*</span> FirstPrototypePte<span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//0x28</span>    <span class="token keyword">struct</span> _MMPTE<span class="token operator">*</span> LastContiguousPte<span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//0x2c</span>    <span class="token keyword">struct</span> _LIST_ENTRY ViewLinks<span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">//0x30</span>    <span class="token keyword">struct</span> _EPROCESS<span class="token operator">*</span> VadsProcess<span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">//0x38</span><span class="token punctuation">}</span>MMVAD<span class="token punctuation">,</span><span class="token operator">*</span>PMMVAD<span class="token punctuation">;</span>NTKERNELAPI UCHAR<span class="token operator">*</span> <span class="token function">PsGetProcessImageFileName</span><span class="token punctuation">(</span>__in PEPROCESS Process<span class="token punctuation">)</span><span class="token punctuation">;</span>VOID <span class="token function">EnumVAD</span><span class="token punctuation">(</span>PMMVAD VADAddress<span class="token punctuation">,</span>ULONG Level<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> ProtectionType <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>VADAddress<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>VADAddress<span class="token operator">-></span>LeftChild<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">EnumVAD</span><span class="token punctuation">(</span>VADAddress<span class="token operator">-></span>LeftChild<span class="token punctuation">,</span> Level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>VADAddress<span class="token operator">-></span>u<span class="token punctuation">.</span>VadFlags<span class="token punctuation">.</span>Protection<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"READONLY"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"EXECUTE"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"EXECUTE_READ"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"READWRITE"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"WRITECOPY"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"EXECUTE_READWRITE"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"EXECUTE_WRITECOPY"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            ProtectionType <span class="token operator">=</span> <span class="token string">"NO_ACCESS"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] VADNodeAddress:0x%x\tLevel:%d\tStartingVpn 0x%x\t EndingVpn 0x%x\tCommit %d\tProtect:%s\t%s\r\n"</span><span class="token punctuation">,</span>VADAddress<span class="token punctuation">,</span>                                                                                                      Level<span class="token punctuation">,</span>                                                                                                     VADAddress<span class="token operator">-></span>StartingVpn<span class="token punctuation">,</span>                                                                                                     VADAddress<span class="token operator">-></span>EndingVpn<span class="token punctuation">,</span>                                                                                                     VADAddress<span class="token operator">-></span>u<span class="token punctuation">.</span>VadFlags<span class="token punctuation">.</span>CommitCharge<span class="token punctuation">,</span>                                                                                                     ProtectionType<span class="token punctuation">,</span>                                                                                                     VADAddress<span class="token operator">-></span>u<span class="token punctuation">.</span>VadFlags<span class="token punctuation">.</span>PrivateMemory<span class="token operator">?</span><span class="token string">"Private"</span><span class="token punctuation">:</span><span class="token string">"Mapped"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>VADAddress<span class="token operator">-></span>RightChild<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">EnumVAD</span><span class="token punctuation">(</span>VADAddress<span class="token operator">-></span>RightChild<span class="token punctuation">,</span> Level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>PEPROCESS <span class="token function">FindProcessByName</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> Name<span class="token punctuation">)</span><span class="token punctuation">{</span>    PEPROCESS findProcess <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PEPROCESS Process <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        NTSTATUS status <span class="token operator">=</span> <span class="token function">PsLookupProcessByProcessId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PUCHAR processname <span class="token operator">=</span> <span class="token function">PsGetProcessImageFileName</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>processname <span class="token operator">&amp;&amp;</span> <span class="token function">_stricmp</span><span class="token punctuation">(</span>processname<span class="token punctuation">,</span> Name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            findProcess <span class="token operator">=</span> Process<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> findProcess<span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">DrivUnload</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] Driver Unload\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING pReg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DbgBreakPoint();</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> DrivUnload<span class="token punctuation">;</span>    PEPROCESS TargetProcess <span class="token operator">=</span> <span class="token function">FindProcessByName</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] TargetProcess: 0x%x\r\n"</span><span class="token punctuation">,</span> TargetProcess<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] Driver Loaded\r\n"</span><span class="token punctuation">,</span> pReg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TargetProcess<span class="token punctuation">)</span> <span class="token keyword">return</span> STATUS_UNSUCCESSFUL<span class="token punctuation">;</span>    ULONG VadRoot <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>ULONG<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span>TargetProcess <span class="token operator">+</span> <span class="token number">0x278</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EnumVAD</span><span class="token punctuation">(</span>VadRoot<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图：</p><p><img src="/2021/11/10/VADList/1.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过遍历VadRoot结构，可以得到一个进程所持有的虚拟内存信息&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;s</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>CTF-羊城杯-OddCode WP</title>
    <link href="http://airshelf.github.io/2021/10/28/ReOddCode/"/>
    <id>http://airshelf.github.io/2021/10/28/ReOddCode/</id>
    <published>2021-10-28T05:42:04.000Z</published>
    <updated>2021-10-29T05:16:33.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本信息观察"><a href="#基本信息观察" class="headerlink" title="基本信息观察"></a>基本信息观察</h3><p>首先确定，基本上是汇编直接写的题目，32位程序</p><p><img src="/2021/10/28/ReOddCode/1.png" alt="image.png"></p><h3 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h3><pre><code>.text:0040526C                                                                 public start.text:0040526C                                                 start:.text:0040526C 51                                                              push    ecx.text:0040526D 68 00 70 40 00                                                  push    offset aInputYourFlagH ; &quot;Input your flag here:\r\n&quot;.text:00405272 FF 15 0C 60 40 00                                               call    ds:printf.text:00405278 83 C4 04                                                        add     esp, 4.text:0040527B 68 1D 70 40 00                                                  push    offset byte_40701D.text:00405280 68 18 70 40 00                                                  push    offset a46s     ; &quot;%46s&quot;.text:00405285 FF 15 08 60 40 00                                               call    ds:scanf        ; scanf(&quot;%46s&quot;,&amp;byte_40701D);.text:0040528B 83 C4 08                                                        add     esp, 8.text:0040528E 33 C0                                                           xor     eax, eax.text:00405290 B3 2D                                                           mov     bl, 2Dh ; &#39;-&#39;.text:00405292 80 3D 1D 70 40 00 53                                            cmp     byte_40701D, 53h ; &#39;S&#39;.text:00405299 75 49                                                           jnz     short loc_4052E4.text:0040529B 80 3D 1E 70 40 00 61                                            cmp     byte_40701E, 61h ; &#39;a&#39;.text:004052A2 75 40                                                           jnz     short loc_4052E4.text:004052A4 80 3D 1F 70 40 00 6E                                            cmp     byte_40701F, 6Eh ; &#39;n&#39;.text:004052AB 75 37                                                           jnz     short loc_4052E4.text:004052AD 80 3D 20 70 40 00 67                                            cmp     byte_407020, 67h ; &#39;g&#39;.text:004052B4 75 2E                                                           jnz     short loc_4052E4.text:004052B6 80 3D 21 70 40 00 46                                            cmp     byte_407021, 46h ; &#39;F&#39;.text:004052BD 75 25                                                           jnz     short loc_4052E4.text:004052BF 80 3D 22 70 40 00 6F                                            cmp     byte_407022, 6Fh ; &#39;o&#39;.text:004052C6 75 1C                                                           jnz     short loc_4052E4.text:004052C8 80 3D 23 70 40 00 72                                            cmp     byte_407023, 72h ; &#39;r&#39;.text:004052CF 75 13                                                           jnz     short loc_4052E4.text:004052D1 80 3D 24 70 40 00 7B                                            cmp     byte_407024, 7Bh ; &#39;&#123;&#39;.text:004052D8 75 0A                                                           jnz     short loc_4052E4.text:004052DA 80 3D 45 70 40 00 7D                                            cmp     byte_407045, 7Dh ; &#39;&#125;&#39; ; 检查字符串格式.text:004052E1 75 01                                                           jnz     short loc_4052E4 ; 判断是否为SangFor&#123;......&#125;格式，长度为46.text:004052E3 40                                                              inc     eax.text:004052E4.text:004052E4                                                 loc_4052E4:                             ; CODE XREF: .text:00405299↑j.text:004052E4                                                                                         ; .text:004052A2↑j ....text:004052E4 0B C0                                                           or      eax, eax.text:004052E6 75 15                                                           jnz     short loc_4052FD ; 符合格式则跳转这里.text:004052E8 68 56 70 40 00                                                  push    offset aFail    ; &quot;Fail.&quot;.text:004052ED FF 15 0C 60 40 00                                               call    ds:printf.text:004052F3 83 C4 04                                                        add     esp, 4.text:004052F6 6A 00                                                           push    0.text:004052F8 E8 03 BD FF FF                                                  call    ExitProcess.text:004052FD                                                 ; ---------------------------------------------------------------------------.text:004052FD.text:004052FD                                                 loc_4052FD:                             ; CODE XREF: .text:004052E6↑j.text:004052FD 8D 3D 5C 70 40 00                                               lea     edi, unk_40705C ; 符合格式则跳转这里.text:00405303 8D 35 1D 70 40 00                                               lea     esi, byte_40701D.text:00405309 EA 10 53 40 00 33 00                                            jmp     far ptr dword_405640</code></pre><p>值得注意的是最后一个jmp是长跳转，IDA分析出错</p><p>实际上是一个远跳转到33:405310这个地址</p><p>在Windows中，程序可以通过修改代码段寄存器切换32位模式和64位模式</p><p>当CS为0x33时，CPU按64位模式执行指令</p><p>当CS为0x23,时，CPU按32位模式执行指令</p><p>执行完这个远跳转后，程序跳转到405310这个地址（也就是下一条指令），CPU切换到64位模式执行，所以接下来的代码都要按64位模式解析。</p><p>编写Unicorn模拟执行64位代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> unicorn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>x86_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> capstone <span class="token keyword">import</span> <span class="token operator">*</span> ADDRESS <span class="token operator">=</span> <span class="token number">0x401000</span>          <span class="token comment" spellcheck="true"># 程序加载的地址</span>INPUT_ADDRESS <span class="token operator">=</span> <span class="token number">0x40701D</span>    <span class="token comment" spellcheck="true"># 输入的地址</span>KEY_ADDRESS <span class="token operator">=</span> <span class="token number">0x40705C</span>      <span class="token comment" spellcheck="true"># 16字节key的地址</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'OddCode.exe'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span>    X64_CODE <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0x4269</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取代码</span><span class="token keyword">class</span> <span class="token class-name">Unidbg</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>        mu <span class="token operator">=</span> Uc<span class="token punctuation">(</span>UC_ARCH_X86<span class="token punctuation">,</span>UC_MODE_64<span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> <span class="token number">0x1000000</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> X64_CODE<span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>INPUT_ADDRESS<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>KEY_ADDRESS<span class="token punctuation">,</span> b<span class="token string">'\x90\xF0\x70\x7C\x52\x05\x91\x90\xAA\xDA\x8F\xFA\x7B\xBC\x79\x4D'</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RAX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RBX<span class="token punctuation">,</span> <span class="token number">0x010B602D</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RCX<span class="token punctuation">,</span> <span class="token number">0xEEFD0A44</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RDX<span class="token punctuation">,</span> <span class="token number">0x0038701C</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RSI<span class="token punctuation">,</span> INPUT_ADDRESS<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># input参数</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RDI<span class="token punctuation">,</span> KEY_ADDRESS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># key参数</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RBP<span class="token punctuation">,</span> <span class="token number">0x012FFE1C</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RSP<span class="token punctuation">,</span> <span class="token number">0x012FFE0C</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RIP<span class="token punctuation">,</span> <span class="token number">0x401010</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> self<span class="token punctuation">.</span>trace<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># hook代码执行，保存代码块执行轨迹</span>        self<span class="token punctuation">.</span>mu <span class="token operator">=</span> mu        self<span class="token punctuation">.</span>except_addr <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>traces <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 用来保存代码块执行轨迹  </span>    <span class="token keyword">def</span> <span class="token function">trace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> address <span class="token operator">!=</span> self<span class="token punctuation">.</span>except_addr<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>traces<span class="token punctuation">.</span>append<span class="token punctuation">(</span>address<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>except_addr <span class="token operator">=</span> address <span class="token operator">+</span> size        <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mu<span class="token punctuation">.</span>emu_start<span class="token punctuation">(</span><span class="token number">0x401010</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token keyword">for</span> addr <span class="token keyword">in</span> self<span class="token punctuation">.</span>traces<span class="token punctuation">]</span><span class="token punctuation">)</span>       Unidbg<span class="token punctuation">(</span>b<span class="token string">'SangFor{00000000000000000000000000000000}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unicorn可以hook代码块执行，但是会被花指令干扰，</p><p>所以这里通过hook指令执行，然后通过</p><p><code>if(当前的地址是否==上次执行的地址+上一条指令的长度)</code>来判断是否发生了代码块跳转</p><p>执行结果如下：</p><pre><code>[&#39;0x401010&#39;, &#39;0x403634&#39;, &#39;0x403e1d&#39;, &#39;0x40389c&#39;, &#39;0x403d9e&#39;, &#39;0x403b8e&#39;, &#39;0x4037ae&#39;, &#39;0x403f3a&#39;, &#39;0x404ee5&#39;, &#39;0x4051ad&#39;, &#39;0x4045f9&#39;, &#39;0x404e03&#39;, &#39;0x403c8f&#39;, &#39;0x404cf1&#39;, &#39;0x404e96&#39;, &#39;0x403d49&#39;, &#39;0x403641&#39;, &#39;0x404ca8&#39;, &#39;0x4049fd&#39;, &#39;0x405109&#39;, &#39;0x404e16&#39;, &#39;0x40382a&#39;, &#39;0x4048f1&#39;, &#39;0x403ec2&#39;, &#39;0x404567&#39;, &#39;0x403a7e&#39;, &#39;0x404ae0&#39;, &#39;0x403718&#39;, &#39;0x40402f&#39;, &#39;0x404ba1&#39;, &#39;0x404263&#39;, &#39;0x404441&#39;, &#39;0x404af2&#39;, &#39;0x4042f7&#39;, &#39;0x405163&#39;, &#39;0x403dd1&#39;, &#39;0x4049b7&#39;, &#39;0x404907&#39;, &#39;0x404ddb&#39;, &#39;0x402896&#39;, &#39;0x402e08&#39;, &#39;0x4035a4&#39;, &#39;0x402bd2&#39;, &#39;0x4032a2&#39;, &#39;0x402cf2&#39;, &#39;0x40296d&#39;, &#39;0x402eb6&#39;, &#39;0x403391&#39;, &#39;0x402f9b&#39;, &#39;0x402ff8&#39;, &#39;0x402b83&#39;, &#39;0x403082&#39;, &#39;0x402ab3&#39;, &#39;0x40333e&#39;, &#39;0x402ee9&#39;, &#39;0x402bc5&#39;, &#39;0x403519&#39;, &#39;0x403447&#39;, &#39;0x4031a1&#39;, &#39;0x4033fa&#39;, &#39;0x402bba&#39;, &#39;0x403623&#39;, &#39;0x402b95&#39;, &#39;0x402e99&#39;, &#39;0x40308d&#39;, &#39;0x4033a0&#39;, &#39;0x403473&#39;, &#39;0x4035ac&#39;, &#39;0x402b21&#39;, &#39;0x402980&#39;, &#39;0x40341d&#39;, &#39;0x4031d4&#39;, &#39;0x4032ab&#39;, &#39;0x4030e2&#39;, &#39;0x40289c&#39;, &#39;0x402acb&#39;, &#39;0x4030f4&#39;, &#39;0x4034f8&#39;, &#39;0x403176&#39;, &#39;0x402e5d&#39;, &#39;0x402cfe&#39;, &#39;0x402bfb&#39;, &#39;0x402f15&#39;, &#39;0x402c6e&#39;, &#39;0x402ea5&#39;, &#39;0x40305d&#39;, &#39;0x402f91&#39;, &#39;0x403267&#39;, &#39;0x403210&#39;, &#39;0x40324a&#39;, &#39;0x40330f&#39;, &#39;0x4032d9&#39;, &#39;0x402e78&#39;, &#39;0x402924&#39;, &#39;0x4034d5&#39;, &#39;0x402c19&#39;, &#39;0x403121&#39;, &#39;0x402907&#39;, &#39;0x402a75&#39;, &#39;0x40332e&#39;, &#39;0x402dc9&#39;, &#39;0x402edc&#39;, &#39;0x40353d&#39;, &#39;0x402c2f&#39;, &#39;0x402cd4&#39;, &#39;0x4028e4&#39;, &#39;0x402b6c&#39;, &#39;0x403481&#39;, &#39;0x40294b&#39;, &#39;0x402b40&#39;, &#39;0x402e83&#39;, &#39;0x402f4d&#39;, &#39;0x4031f8&#39;, &#39;0x404df6&#39;, &#39;0x404177&#39;, &#39;0x40496d&#39;, &#39;0x4037a1&#39;, &#39;0x403a3a&#39;, &#39;0x404d76&#39;, &#39;0x403e38&#39;, &#39;0x4045bc&#39;, &#39;0x403f86&#39;, &#39;0x403df5&#39;, &#39;0x404242&#39;, &#39;0x403aee&#39;, &#39;0x405039&#39;, &#39;0x403ff8&#39;, &#39;0x404cb9&#39;, &#39;0x4048a1&#39;, &#39;0x404135&#39;, &#39;0x403d05&#39;, &#39;0x404bd9&#39;, &#39;0x403c0e&#39;, &#39;0x405133&#39;, &#39;0x4042d7&#39;, &#39;0x404bff&#39;, &#39;0x4039fe&#39;, &#39;0x4050a8&#39;, &#39;0x404a2f&#39;, &#39;0x404e6a&#39;, &#39;0x4043f6&#39;, &#39;0x40401d&#39;, &#39;0x4043a1&#39;, &#39;0x404b95&#39;, &#39;0x4037d5&#39;, &#39;0x40404d&#39;, &#39;0x4037c6&#39;, &#39;0x4046b3&#39;, &#39;0x405120&#39;, &#39;0x405013&#39;, &#39;0x405075&#39;, &#39;0x404673&#39;, &#39;0x4045e1&#39;, &#39;0x403ba2&#39;, &#39;0x404802&#39;, &#39;0x40481c&#39;, &#39;0x4038d6&#39;, &#39;0x404f11&#39;, &#39;0x404494&#39;, &#39;0x4041f1&#39;, &#39;0x403853&#39;, &#39;0x40504d&#39;, &#39;0x404529&#39;, &#39;0x4050df&#39;, &#39;0x403671&#39;, &#39;0x403968&#39;, &#39;0x403741&#39;, &#39;0x404074&#39;, &#39;0x40368e&#39;, &#39;0x404ffb&#39;, &#39;0x404c86&#39;, &#39;0x40491f&#39;, &#39;0x40432b&#39;, &#39;0x403e8c&#39;, &#39;0x403f97&#39;, &#39;0x4038e5&#39;, &#39;0x4044bc&#39;, &#39;0x40444e&#39;, &#39;0x403a48&#39;, &#39;0x4039c9&#39;, &#39;0x4046d2&#39;, &#39;0x403982&#39;, &#39;0x403eed&#39;, &#39;0x404682&#39;, &#39;0x403d7c&#39;, &#39;0x403eb6&#39;, &#39;0x403c25&#39;, &#39;0x404390&#39;, &#39;0x40462c&#39;, &#39;0x404957&#39;, &#39;0x404a0c&#39;, &#39;0x40486e&#39;, &#39;0x40493b&#39;, &#39;0x404479&#39;, &#39;0x404760&#39;, &#39;0x404ed5&#39;, &#39;0x404eb6&#39;, &#39;0x404d52&#39;, &#39;0x4039a8&#39;, &#39;0x4041bb&#39;, &#39;0x404e48&#39;, &#39;0x4039b4&#39;, &#39;0x40513e&#39;, &#39;0x4041a4&#39;, &#39;0x40473a&#39;, &#39;0x404abe&#39;, &#39;0x4047d8&#39;, &#39;0x404650&#39;, &#39;0x4051b7&#39;, &#39;0x404367&#39;, &#39;0x403b75&#39;, &#39;0x403c63&#39;, &#39;0x404542&#39;, &#39;0x40487f&#39;, &#39;0x404b79&#39;, &#39;0x404ccc&#39;, &#39;0x403cc8&#39;, &#39;0x404d28&#39;, &#39;0x4036f1&#39;, &#39;0x404a7b&#39;, &#39;0x403cd3&#39;, &#39;0x403e98&#39;, &#39;0x404f28&#39;, &#39;0x403847&#39;, &#39;0x4038ac&#39;, &#39;0x40365c&#39;, &#39;0x40454f&#39;, &#39;0x403944&#39;, &#39;0x404105&#39;, &#39;0x404506&#39;, &#39;0x404bb6&#39;, &#39;0x403893&#39;, &#39;0x404c71&#39;, &#39;0x403839&#39;, &#39;0x404f3b&#39;, &#39;0x403bca&#39;, &#39;0x403795&#39;, &#39;0x403b16&#39;, &#39;0x4040c9&#39;, &#39;0x403d3c&#39;, &#39;0x403afe&#39;, &#39;0x405230&#39;, &#39;0x40419c&#39;]</code></pre><p>跳转过多。。。所以我们加一点约束条件，对模拟内存访问进行HOOK</p><pre class="line-numbers language-python"><code class="language-python">mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_MEM_READ<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hook_mem_read<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hook 内存读取</span><span class="token keyword">def</span> <span class="token function">hook_mem_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> access<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> value<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> address <span class="token operator">>=</span> INPUT_ADDRESS <span class="token operator">and</span> address <span class="token operator">&lt;=</span> INPUT_ADDRESS <span class="token operator">+</span> <span class="token number">41</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Read input[{address - INPUT_ADDRESS}] at {hex(mu.reg_read(UC_X86_REG_RIP))}'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> address <span class="token operator">>=</span> KEY_ADDRESS <span class="token operator">and</span> address <span class="token operator">&lt;=</span> KEY_ADDRESS <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Read key[{address - KEY_ADDRESS}] at {hex(mu.reg_read(UC_X86_REG_RIP))}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Read input[8] at 0x40326dRead input[8] at 0x403214Read input[8] at 0x403219Read input[9] at 0x40324aRead input[9] at 0x403254Read input[9] at 0x40325eRead key[0] at 0x403a3e</code></pre><p>对上述HOOK结果进行分析，不难得出：<br>(1)输入可能是两个字节一组进行判断<br>(2)校验不通过不会进行余下的字符串检查<br>(3)读取输入的代码地址<br>(4)读取Key的代码地址</p><p>接下来IDA分析</p><p>分别观察代码块</p><p>0x40326d -&gt; 0x266D</p><p><img src="/2021/10/28/ReOddCode/2.png" alt="image.png"></p><p>0x403214 -&gt; 0x2614<br><img src="/2021/10/28/ReOddCode/3.png" alt="image.png"></p><p>0x40324a -&gt; 0x264a<br><img src="/2021/10/28/ReOddCode/4.png" alt="image.png"></p><p>至此大概明白了对于数字输入的检查方法</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    al <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    bl <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一看key的部分</p><p><img src="/2021/10/28/ReOddCode/5.png" alt="image.png"></p><p>继续跟下去</p><p><img src="/2021/10/28/ReOddCode/6.png" alt="image.png"></p><p>发现跟到这里断了。。无奈之下，我们需要找到读取key之后的判断方法</p><p>我们再修改一下trace函数，通过capstone反汇编引擎找到执行到的cmp指令和test指令的地址</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">trace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    disasm <span class="token operator">=</span> self<span class="token punctuation">.</span>md<span class="token punctuation">.</span>disasm<span class="token punctuation">(</span>mu<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>address<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> disasm<span class="token punctuation">:</span>        mnemonic <span class="token operator">=</span> i<span class="token punctuation">.</span>mnemonic        <span class="token keyword">if</span> mnemonic <span class="token operator">==</span> <span class="token string">'cmp'</span> <span class="token operator">or</span> mnemonic <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Instruction {mnemonic} at {hex(address)} offset: {hex(address - ADDRESS + 0x400)}'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> address <span class="token operator">!=</span> self<span class="token punctuation">.</span>except_addr<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>traces<span class="token punctuation">.</span>append<span class="token punctuation">(</span>address<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>except_addr <span class="token operator">=</span> address <span class="token operator">+</span> size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到输出</p><pre><code>Instruction cmp at 0x403ca1 offset: 0x30a1Instruction cmp at 0x404de8 offset: 0x41e8Instruction cmp at 0x40326d offset: 0x266dRead input[8] at 0x40326dInstruction cmp at 0x403214 offset: 0x2614Read input[8] at 0x403214Read input[8] at 0x403219Instruction cmp at 0x40324a offset: 0x264aRead input[9] at 0x40324aInstruction cmp at 0x403254 offset: 0x2654Read input[9] at 0x403254Read input[9] at 0x40325eInstruction test at 0x404177 offset: 0x3577Read key[0] at 0x403a3eInstruction cmp at 0x4038e7 offset: 0x2ce7</code></pre><p>可以得出，key之后的比较，只有0x4038e7一处</p><p>而FLAG校验为2个字节一组，是可以爆破的。</p><p>所以只需要记录正确执行到0x4038ef的字符串就可以。</p><p>爆破完整脚本：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array<span class="token keyword">import</span> capstone<span class="token keyword">from</span> unicorn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>x86_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> capstone <span class="token keyword">import</span> <span class="token operator">*</span> ADDRESS <span class="token operator">=</span> <span class="token number">0x401000</span>          <span class="token comment" spellcheck="true"># 程序加载的地址</span>INPUT_ADDRESS <span class="token operator">=</span> <span class="token number">0x40701D</span>    <span class="token comment" spellcheck="true"># 输入的地址</span>KEY_ADDRESS <span class="token operator">=</span> <span class="token number">0x40705C</span>      <span class="token comment" spellcheck="true"># 16字节key的地址</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'OddCode.exe'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span>    X64_CODE <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0x4269</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取代码</span><span class="token keyword">class</span> <span class="token class-name">Unidbg</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>Allhit<span class="token punctuation">)</span><span class="token punctuation">:</span>        mu <span class="token operator">=</span> Uc<span class="token punctuation">(</span>UC_ARCH_X86<span class="token punctuation">,</span>UC_MODE_64<span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> <span class="token number">0x1000000</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> X64_CODE<span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>INPUT_ADDRESS<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>KEY_ADDRESS<span class="token punctuation">,</span> b<span class="token string">'\x90\xF0\x70\x7C\x52\x05\x91\x90\xAA\xDA\x8F\xFA\x7B\xBC\x79\x4D'</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RAX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RBX<span class="token punctuation">,</span> <span class="token number">0x010B602D</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RCX<span class="token punctuation">,</span> <span class="token number">0xEEFD0A44</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RDX<span class="token punctuation">,</span> <span class="token number">0x0038701C</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RSI<span class="token punctuation">,</span> INPUT_ADDRESS<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># input参数</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RDI<span class="token punctuation">,</span> KEY_ADDRESS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># key参数</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RBP<span class="token punctuation">,</span> <span class="token number">0x012FFE1C</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RSP<span class="token punctuation">,</span> <span class="token number">0x012FFE0C</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RIP<span class="token punctuation">,</span> <span class="token number">0x401010</span><span class="token punctuation">)</span>        mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> self<span class="token punctuation">.</span>trace<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># hook代码执行，保存代码块执行轨迹</span>        <span class="token comment" spellcheck="true">#mu.hook_add(UC_HOOK_MEM_READ, self.hook_mem_read) # hook 内存读取</span>        self<span class="token punctuation">.</span>mu <span class="token operator">=</span> mu        self<span class="token punctuation">.</span>except_addr <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>traces <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 用来保存代码块执行轨迹  </span>        self<span class="token punctuation">.</span>md <span class="token operator">=</span> Cs<span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>isSuccess <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>hit <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>Allhit <span class="token operator">=</span> Allhit    <span class="token keyword">def</span> <span class="token function">trace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># disasm = self.md.disasm(mu.mem_read(address, size), address)</span>        <span class="token comment" spellcheck="true"># for i in disasm:</span>        <span class="token comment" spellcheck="true">#     mnemonic = i.mnemonic</span>        <span class="token comment" spellcheck="true">#     if mnemonic == 'cmp' or mnemonic == 'test':</span>        <span class="token comment" spellcheck="true">#         print(f'Instruction {mnemonic} at {hex(address)} offset: {hex(address - ADDRESS + 0x400)}')</span>        <span class="token comment" spellcheck="true"># if address != self.except_addr:</span>        <span class="token comment" spellcheck="true">#     self.traces.append(address - ADDRESS + 0x400)</span>        <span class="token comment" spellcheck="true"># self.except_addr = address + size</span>        <span class="token keyword">if</span> address <span class="token operator">==</span> <span class="token number">0x4038ef</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hit <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>hit <span class="token operator">==</span> self<span class="token punctuation">.</span>Allhit<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>isSuccess <span class="token operator">=</span> <span class="token boolean">True</span>                mu<span class="token punctuation">.</span>emu_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">hook_mem_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> access<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> value<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> address <span class="token operator">>=</span> INPUT_ADDRESS <span class="token operator">and</span> address <span class="token operator">&lt;=</span> INPUT_ADDRESS <span class="token operator">+</span> <span class="token number">41</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Read input[{address - INPUT_ADDRESS}] at {hex(mu.reg_read(UC_X86_REG_RIP))}'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> address <span class="token operator">>=</span> KEY_ADDRESS <span class="token operator">and</span> address <span class="token operator">&lt;=</span> KEY_ADDRESS <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Read key[{address - KEY_ADDRESS}] at {hex(mu.reg_read(UC_X86_REG_RIP))}'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mu<span class="token punctuation">.</span>emu_start<span class="token punctuation">(</span><span class="token number">0x401010</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token comment" spellcheck="true">#print([hex(addr)for addr in self.traces])</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSuccess<span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> except_hit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token string">'1234567890abcdefABCDEF'</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> b<span class="token string">'1234567890abcdefABCDEF'</span><span class="token punctuation">:</span>            flag<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token punctuation">(</span>except_hit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i            flag<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token punctuation">(</span>except_hit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j            <span class="token keyword">if</span> Unidbg<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> except_hit<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>flag <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>b<span class="token string">'SangFor{00000000000000000000000000000000}'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    get_flag<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Unidbg(b'SangFor{00000000000000000000000000000000}').start()</span><span class="token comment" spellcheck="true">#SangFor{00000000000000000000000000000000}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破输出:</p><pre><code>SangFor&#123;A7000000000000000000000000000000&#125;SangFor&#123;A7A40000000000000000000000000000&#125;SangFor&#123;A7A4A000000000000000000000000000&#125;SangFor&#123;A7A4A0C0000000000000000000000000&#125;SangFor&#123;A7A4A0C0B10000000000000000000000&#125;SangFor&#123;A7A4A0C0B10B00000000000000000000&#125;SangFor&#123;A7A4A0C0B10Baf000000000000000000&#125;SangFor&#123;A7A4A0C0B10Bafa70000000000000000&#125;SangFor&#123;A7A4A0C0B10Bafa77600000000000000&#125;SangFor&#123;A7A4A0C0B10Bafa776F5000000000000&#125;SangFor&#123;A7A4A0C0B10Bafa776F55F0000000000&#125;SangFor&#123;A7A4A0C0B10Bafa776F55FF400000000&#125;SangFor&#123;A7A4A0C0B10Bafa776F55FF4F8000000&#125;SangFor&#123;A7A4A0C0B10Bafa776F55FF4F8C60000&#125;SangFor&#123;A7A4A0C0B10Bafa776F55FF4F8C6E800&#125;SangFor&#123;A7A4A0C0B10Bafa776F55FF4F8C6E849&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本信息观察&quot;&gt;&lt;a href=&quot;#基本信息观察&quot; class=&quot;headerlink&quot; title=&quot;基本信息观察&quot;&gt;&lt;/a&gt;基本信息观察&lt;/h3&gt;&lt;p&gt;首先确定，基本上是汇编直接写的题目，32位程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/10/28/R</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://airshelf.github.io/tags/CTF/"/>
    
    <category term="逆向" scheme="http://airshelf.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>unicorn学习记录</title>
    <link href="http://airshelf.github.io/2021/10/27/Unicorn1/"/>
    <id>http://airshelf.github.io/2021/10/27/Unicorn1/</id>
    <published>2021-10-27T02:34:54.000Z</published>
    <updated>2021-10-28T03:15:27.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="unicorn简介"><a href="#unicorn简介" class="headerlink" title="unicorn简介"></a>unicorn简介</h3><pre><code>Unicorn 是一个轻量级, 多平台, 多架构的 CPU 模拟器框架.我们可以更好地关注 CPU 操作, 忽略机器设备的差异. 想象一下, 我们可以将其应用于这些情景:比如我们单纯只是需要模拟代码的执行而非需要一个真的 CPU 去完成那些操作, 又或者想要更安全地分析恶意代码, 检测病毒特征, 或者想要在逆向过程中验证某些代码的含义. 使用 CPU 模拟器可以很好地帮助我们提供便捷.它的亮点 (这也归功于 Unicorn 是基于 qemu 而开发的) 包括:支持多种架构: Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64).对 Windows 和 nix 系统 (已确认包含 Mac OSX, Linux, BSD &amp; Solaris) 的原生支持具有平台独立且简洁易于使用的 API使用 JIT 编译技术, 性能表现优异</code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><pre><code>调用恶意软件中一些有趣的函数, 而不用创建一个有害的进程用于 CTF 竞赛用于模糊测试用于 gdb 插件, 基于代码模拟执行的插件模拟执行一些混淆代码</code></pre><h3 id="python用法"><a href="#python用法" class="headerlink" title="python用法"></a>python用法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> unicorn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>x86_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 需要使用一些x86常量, import一下</span>X86_CODE32 <span class="token operator">=</span> b<span class="token string">"\x41\x4a"</span>    <span class="token comment" spellcheck="true"># 这是我们要模拟的代码，这里使用16进制表示，表示两个x86指令“INC ecx”和”DEC dex“</span>Address <span class="token operator">=</span> <span class="token number">0x1000000</span>         <span class="token comment" spellcheck="true"># 指定虚拟地址，我们将在这儿模拟上述代码</span>mu <span class="token operator">=</span> Uc<span class="token punctuation">(</span>UC_ARCH_X86<span class="token punctuation">,</span> UC_MODE_32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用Uc类初始化Unicorn, 该类接受2个参数：硬件架构和硬件模式。 在这里，我们希望模拟X86体系结构的32位代码</span>mu<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>Address<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用mem_map方法在前面声明的地址处映射2MB内存。此过程中的所有CPU操作都只能访问此内存。 此内存使用默认权限READ，WRITE和EXECUTE进行映射</span>mu<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>Address<span class="token punctuation">,</span> X86_CODE32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将要模拟的代码写入我们刚刚映射到的内存中。 mem_write方法有两个参数：要写入的地址和要写入内存的代码</span>mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_ECX<span class="token punctuation">,</span> <span class="token number">0X1234</span><span class="token punctuation">)</span>mu<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_EDX<span class="token punctuation">,</span> <span class="token number">0X7890</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用reg_write方法设置ECX,EDX寄存器的值</span>mu<span class="token punctuation">.</span>emu_start<span class="token punctuation">(</span>Address<span class="token punctuation">,</span> Address<span class="token operator">+</span>len<span class="token punctuation">(</span>X86_CODE32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用emu_start方法开始模拟。该API采用4个参数:需要模拟的代码的地址、模拟停止的地址(正好在X86_CODE32的最后一个字节之后)、要模拟的时间和要模拟的指令数量。如果我们忽略最后两个参数，比如这个例子，unicorn将在无限时间和无限数量的指令中模拟代码</span>r_ecx <span class="token operator">=</span> mu<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_ECX<span class="token punctuation">)</span>r_edx <span class="token operator">=</span> mu<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_EDX<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过reg_read函数读取</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> ecx = 0x%x"</span> <span class="token operator">%</span> r_ecx<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> edx = 0x%x"</span> <span class="token operator">%</span> r_edx<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印出寄存器ECX,EDX的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C用法"><a href="#C用法" class="headerlink" title="C用法"></a>C用法</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unicorn/unicorn.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span> <span class="token macro property">#<span class="token directive keyword">define</span> X86_CODE32 "\x41\x4a"      </span><span class="token comment" spellcheck="true">//INC ecx; DEC edx</span><span class="token macro property">#<span class="token directive keyword">define</span> ADDRESS 0x1000000          </span><span class="token comment" spellcheck="true">//定义一个虚拟地址,我们将在这里模拟上述代码</span>                                   <span class="token comment" spellcheck="true">//memory address where emulation starts</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>    uc_engine <span class="token operator">*</span>uc<span class="token punctuation">;</span>    uc_err err<span class="token punctuation">;</span>    <span class="token keyword">int</span> r_ecx <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// ECX register</span>    <span class="token keyword">int</span> r_edx <span class="token operator">=</span> <span class="token number">0x7890</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// EDX register</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Emulate i386 code\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    err <span class="token operator">=</span> <span class="token function">uc_open</span><span class="token punctuation">(</span>UC_ARCH_X86<span class="token punctuation">,</span> UC_MODE_32<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以X86_32的模式初始化</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> UC_ERR_OK<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed on uc_open() with error returned: %u\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">uc_mem_map</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> ADDRESS<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> UC_PROT_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在对应地址出映射2M的内存</span>     <span class="token comment" spellcheck="true">// write machine code to be emulated to memory</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">uc_mem_write</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> ADDRESS<span class="token punctuation">,</span> X86_CODE32<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X86_CODE32<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to write emulation code to memory, quit!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">uc_reg_write</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> UC_X86_REG_ECX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r_ecx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">uc_reg_write</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> UC_X86_REG_EDX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r_edx<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//初始话寄存器的值</span>     <span class="token comment" spellcheck="true">//最后两个参数没有指定,在无限时间和无限指令中模拟代码</span>    err<span class="token operator">=</span><span class="token function">uc_emu_start</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> ADDRESS<span class="token punctuation">,</span> ADDRESS <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X86_CODE32<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed on uc_emu_start() with error returned %u: %s\n"</span><span class="token punctuation">,</span>        err<span class="token punctuation">,</span> <span class="token function">uc_strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// now print out some registers</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Emulation done. Below is the CPU context\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">uc_reg_read</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> UC_X86_REG_ECX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r_ecx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">uc_reg_read</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> UC_X86_REG_EDX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r_edx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">>> ECX = 0x%x\n"</span><span class="token punctuation">,</span> r_ecx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">>> EDX = 0x%x\n"</span><span class="token punctuation">,</span> r_edx<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">uc_close</span><span class="token punctuation">(</span>uc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译</p><pre><code>gcc test.c -o test -lunicorn -lpthread</code></pre><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><pre><code>Unicorn 采用虚拟内存机制，使得虚拟CPU的内存与真实CPU的内存隔离。Unicorn 使用如下API来操作内存:uc_mem_mapuc_mem_readuc_mem_write使用uc_mem_map映射内存的时候，address 与 size 都需要与0x1000对齐，也就是0x1000的整数倍，否则会报UC_ERR_ARG 异常。</code></pre><h3 id="Hook机制"><a href="#Hook机制" class="headerlink" title="Hook机制"></a>Hook机制</h3><pre><code>#指令执行类UC_HOOK_INTRUC_HOOK_INSNUC_HOOK_CODEUC_HOOK_BLOCK#内存访问类UC_HOOK_MEM_READUC_HOOK_MEM_WRITEUC_HOOK_MEM_FETCHUC_HOOK_MEM_READ_AFTERUC_HOOK_MEM_PROTUC_HOOK_MEM_FETCH_INVALIDUC_HOOK_MEM_INVALIDUC_HOOK_MEM_VALID#异常处理类UC_HOOK_MEM_READ_UNMAPPEDUC_HOOK_MEM_WRITE_UNMAPPEDUC_HOOK_MEM_FETCH_UNMAPPED调用hook_add函数可添加一个Hook。Unicorn的Hook是链式的，而不是传统Hook的覆盖式，也就是说，可以同时添加多个同类型的Hook，Unicorn会依次调用每一个handler。hook callback 是有作用范围的（见hook_add begin参数）。</code></pre><p>python包中的hook_add函数原型如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hook_add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> htype<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> user_data<span class="token operator">=</span>None<span class="token punctuation">,</span> begin<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> arg1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>htype 就是Hook的类型，callback是hook回调用；callback 是Hook的处理handler指针。请注意！不同类型的hook，handler的参数定义也是不同的。user_data 附加参数，所有的handler都有一个user_data参数，由这里传值。begin hook 作用范围起始地址end hook 作用范围结束地址，默认则作用于所有代码。</code></pre><h3 id="Hook-callback"><a href="#Hook-callback" class="headerlink" title="Hook callback"></a>Hook callback</h3><p>不同类型的hook，对应的callback的参数也不相同，这里只给出C语言定义。</p><p>UC_HOOK_CODE &amp; UC_HOOK_BLOCK</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>uc_cb_hookcode_t<span class="token punctuation">)</span><span class="token punctuation">(</span>uc_engine <span class="token operator">*</span>uc<span class="token punctuation">,</span> uint64_t address<span class="token punctuation">,</span> uint32_t size<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*address: 当前执行的指令地址size: 当前指令的长度，如果长度未知，则为0user_data: hook_add 设置的user_data参数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>READ, WRITE &amp; FETCH</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>uc_cb_hookmem_t<span class="token punctuation">)</span><span class="token punctuation">(</span>uc_engine <span class="token operator">*</span>uc<span class="token punctuation">,</span> uc_mem_type type<span class="token punctuation">,</span> uint64_t address<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> int64_t value<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*type: 内存操作类型 READ, or WRITEaddress: 当前指令地址size: 读或写的长度value: 写入的值（type = read时无视）user_data: hook_add 设置的user_data参数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>invalid memory access events (UNMAPPED and PROT events)</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>uc_cb_eventmem_t<span class="token punctuation">)</span><span class="token punctuation">(</span>uc_engine <span class="token operator">*</span>uc<span class="token punctuation">,</span> uc_mem_type type<span class="token punctuation">,</span> uint64_t address<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> int64_t value<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*type: 内存操作类型 READ, or WRITEaddress: 当前指令地址size: 读或写的长度value: 写入的值（type = read时无视）user_data: hook_add 设置的user_data参数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hook-回调返回值"><a href="#Hook-回调返回值" class="headerlink" title="Hook 回调返回值"></a>Hook 回调返回值</h3><p>返回真，继续模拟执行<br>返回假，停止模拟执行</p><h3 id="Unicorn-导入处理器相关的常量"><a href="#Unicorn-导入处理器相关的常量" class="headerlink" title="Unicorn 导入处理器相关的常量"></a>Unicorn 导入处理器相关的常量</h3><p>Unicorn 支持多种不同的CPU指令集，每一种指令集都有自己独立的寄存器, Unicorn使用统一API管理多种不同的CPU指令集，并将寄存器名字映射成数字常量。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>arm_const  <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>arm64_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>m68k_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>mips_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>sparc_const <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>x86_const <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="寄存器常量命名规则"><a href="#寄存器常量命名规则" class="headerlink" title="寄存器常量命名规则"></a>寄存器常量命名规则</h3><pre><code>UC_ + 指令集 + REG + 大写寄存器名如：UC_ARM_REG_R0如：UC_X86_REG_EAX</code></pre><h3 id="映射内存"><a href="#映射内存" class="headerlink" title="映射内存"></a>映射内存</h3><p>想用Unicorn模拟执行代码，是不能将代码字节流直接以参数形式传递给Unicorn，而是将要执行的代码写入到Unicorn的虚拟内存中。<br>Uc虚拟机实例初始内存是没有任何映射的，在读写内存之前使用uc_mem_map函数映射一段内存。</p><pre><code># map 2MB memory for this emulationADDRESS = 0x10000mu.mem_map(ADDRESS, 2 * 0x10000)</code></pre><p>这段代码在内存地址0x10000处映射了一段大小为2M的内存。<br>注意：要求 address 和 size 参数都与0x1000对齐,否则会报UC_ERR_ARG异常。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/unicorn-engine/unicorn/tree/master/samples">https://github.com/unicorn-engine/unicorn/tree/master/samples</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;unicorn简介&quot;&gt;&lt;a href=&quot;#unicorn简介&quot; class=&quot;headerlink&quot; title=&quot;unicorn简介&quot;&gt;&lt;/a&gt;unicorn简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Unicorn 是一个轻量级, 多平台, 多架构的 CPU 模拟器框</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://airshelf.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>用C做C#的注入和HOOK</title>
    <link href="http://airshelf.github.io/2021/10/13/hookCSharpWithC/"/>
    <id>http://airshelf.github.io/2021/10/13/hookCSharpWithC/</id>
    <published>2021-10-13T09:08:36.000Z</published>
    <updated>2021-10-25T08:11:12.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JIT临时编译现象观察"><a href="#JIT临时编译现象观察" class="headerlink" title="JIT临时编译现象观察"></a>JIT临时编译现象观察</h3><p>为了某个目的，我设计一些简单的实验，最后做了一下笔记，以下是笔记内容。</p><p>C#程序是通过JIT临时编译而成,所以每次函数编译后的代码存放在一个随机的内存地址，如果我们想使用C进行HOOK，则需要取得这个随即地址。</p><p>首先对这个现象进行观察：</p><p>1、创建观察对象，这里我选择命令行应用就足够了<br><img src="/2021/10/13/hookCSharpWithC/1.png" alt="1.png"></p><p>2、将默认生成的代码稍作修改</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span><span class="token keyword">namespace</span> DemoAlice<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MethodInfo mi <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0:X8}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>mi<span class="token punctuation">.</span>MethodHandle<span class="token punctuation">.</span><span class="token function">GetFunctionPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"someThing : "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用到了C#中的反射方法拿到test函数地址<br>这个test也是后续我们用来测试hook的函数<br><img src="/2021/10/13/hookCSharpWithC/2.png" alt="2.png"></p><p>运行之后，我们可以看到这个函数地址。<br><img src="/2021/10/13/hookCSharpWithC/3.png" alt="3.png"></p><p>其中0x2AA098A地址开始显然是我们的test代码逻辑，说明这个函数位置找对了，且临时编译的代码也是寻常的汇编字节码，并不是具有虚拟意义的字节码，这样也就是说寻常的二进制字节码只要插入这段内存，就可以修改原本的程序逻辑，剩下的问题就只有如何定位这段代码了。</p><p>在重复运行后可以观察得到，每次临时编译后的临时代码也是相同的。</p><p>基于上述观察不难得到两种定位的思路</p><p>第一种：通过C++/CLI的特性，同样使用反射也能够拿到编译后的函数地址。</p><p>第二种：通过快速搜索内存的方法，直接搜索临时代码的特征。</p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>为了测试我的HOOK方法是否好用，那么随便写个远程线程注入吧，毕竟重点不在这。</p><p>由于是做实验，我这里的路径什么的就很随意的写死了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    DWORD Pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PID : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    HANDLE hProc <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> Pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C:\\Users\\admin\\source\\repos\\DemoAlice\\Debug\\injectordll.dll"</span><span class="token punctuation">;</span>    LPVOID pszLibFileRemote <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD n <span class="token operator">=</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProc<span class="token punctuation">,</span> pszLibFileRemote<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PTHREAD_START_ROUTINE pfnThreadRtn <span class="token operator">=</span> <span class="token punctuation">(</span>PTHREAD_START_ROUTINE<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span>L<span class="token string">"Kernel32"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HANDLE hThread <span class="token operator">=</span> <span class="token function">CreateRemoteThread</span><span class="token punctuation">(</span>hProc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pfnThreadRtn<span class="token punctuation">,</span> pszLibFileRemote<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位test函数"><a href="#定位test函数" class="headerlink" title="定位test函数"></a>定位test函数</h3><h5 id="使用C-CLI的反射拿到函数地址"><a href="#使用C-CLI的反射拿到函数地址" class="headerlink" title="使用C++/CLI的反射拿到函数地址"></a>使用C++/CLI的反射拿到函数地址</h5><p>创建一个C++的DLL项目，需要修改一下项目配置<br><img src="/2021/10/13/hookCSharpWithC/4.png" alt="4.png"><br>打开公共语言运行时支持</p><p><img src="/2021/10/13/hookCSharpWithC/5.png" alt="5.png"><br>一致性模式选择NO</p><p>然后编写DLL代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// dllmain.cpp : Defines the entry point for the DLL application.</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"pch.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>using namespace System<span class="token punctuation">;</span>using namespace Reflection<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Type<span class="token operator">^</span> type <span class="token operator">=</span> Type<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"DemoAlice.Program,DemoAlice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodInfo<span class="token operator">^</span> method <span class="token operator">=</span> type<span class="token operator">-></span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">:</span><span class="token punctuation">:</span>Static <span class="token operator">|</span> BindingFlags<span class="token punctuation">:</span><span class="token punctuation">:</span>Public<span class="token punctuation">)</span><span class="token punctuation">;</span>    PVOID address <span class="token operator">=</span> <span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span>method<span class="token operator">-></span>MethodHandle<span class="token punctuation">.</span><span class="token function">GetFunctionPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> DebugString<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">sprintf_s</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">"[+] : 0x%x\r\n"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OutputDebugStringA</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf_s</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">"[+] : 0x%x\r\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OutputDebugStringA</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span> HMODULE hModule<span class="token punctuation">,</span>                       DWORD  ul_reason_for_call<span class="token punctuation">,</span>                       LPVOID lpReserved                     <span class="token punctuation">)</span><span class="token punctuation">{</span>    HANDLE hThread<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token punctuation">:</span>        hThread <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPTHREAD_START_ROUTINE<span class="token punctuation">)</span>showTest<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中看到这种定位是成功的<br><img src="/2021/10/13/hookCSharpWithC/6.png" alt="6.png"></p><h5 id="纯C也可以使用特征定位"><a href="#纯C也可以使用特征定位" class="headerlink" title="纯C也可以使用特征定位"></a>纯C也可以使用特征定位</h5><p>直接上代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"pch.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">showTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SYSTEM_INFO sysinfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sysinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>sysinfo<span class="token punctuation">.</span>lpMinimumApplicationAddress<span class="token punctuation">;</span>    MEMORY_BASIC_INFORMATION meminfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    DWORD targetAddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> DebugString<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> sysinfo<span class="token punctuation">.</span>lpMaximumApplicationAddress<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        size_t size <span class="token operator">=</span> <span class="token function">VirtualQueryEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>meminfo<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MEMORY_BASIC_INFORMATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MEMORY_BASIC_INFORMATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>meminfo<span class="token punctuation">.</span>Protect <span class="token operator">==</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">int</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>meminfo<span class="token punctuation">.</span>BaseAddress<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> meminfo<span class="token punctuation">.</span>RegionSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x55</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x8B</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEC</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x83</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEC</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x1C</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x33</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xC0</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x45</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEC</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x45</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE8</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x45</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE4</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x4D</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFC</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    targetAddr <span class="token operator">=</span> addr <span class="token operator">+</span> i<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        p <span class="token operator">+</span><span class="token operator">=</span> meminfo<span class="token punctuation">.</span>RegionSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetAddr<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sprintf_s</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">"[+] : 0x%x\r\n"</span><span class="token punctuation">,</span> targetAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OutputDebugStringA</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span> HMODULE hModule<span class="token punctuation">,</span>                       DWORD  ul_reason_for_call<span class="token punctuation">,</span>                       LPVOID lpReserved                     <span class="token punctuation">)</span><span class="token punctuation">{</span>    HANDLE hThread<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token punctuation">:</span>        hThread <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPTHREAD_START_ROUTINE<span class="token punctuation">)</span>showTest<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到结果，确实能够快速定位到目标函数<br><img src="/2021/10/13/hookCSharpWithC/7.png" alt="7.png"></p><h3 id="最后，HOOK"><a href="#最后，HOOK" class="headerlink" title="最后，HOOK"></a>最后，HOOK</h3><p>HOOK部分各种HOOk姿势其实都是可以的，我这里就用我用的比较顺手的钩子库MinHook</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"pch.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MinHook.h"</span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"libMinHook.lib")</span>PVOID OriginAddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">realHookThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello C#,I'm C++\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span><span class="token function">MyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    __asm     <span class="token punctuation">{</span>        call realHookThing<span class="token punctuation">;</span>        mov ecx<span class="token punctuation">,</span> 22b8h<span class="token punctuation">;</span>        jmp OriginAddr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">showTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SYSTEM_INFO sysinfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sysinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>sysinfo<span class="token punctuation">.</span>lpMinimumApplicationAddress<span class="token punctuation">;</span>    MEMORY_BASIC_INFORMATION meminfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    DWORD targetAddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> DebugString<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> sysinfo<span class="token punctuation">.</span>lpMaximumApplicationAddress<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        size_t size <span class="token operator">=</span> <span class="token function">VirtualQueryEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>meminfo<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MEMORY_BASIC_INFORMATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MEMORY_BASIC_INFORMATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>meminfo<span class="token punctuation">.</span>Protect <span class="token operator">==</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">int</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>meminfo<span class="token punctuation">.</span>BaseAddress<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> meminfo<span class="token punctuation">.</span>RegionSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x55</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x8B</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEC</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x83</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEC</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x1C</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x33</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xC0</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x45</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEC</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x45</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE8</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x45</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE4</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x89</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x4D</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFC</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    targetAddr <span class="token operator">=</span> addr <span class="token operator">+</span> i<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        p <span class="token operator">+</span><span class="token operator">=</span> meminfo<span class="token punctuation">.</span>RegionSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetAddr<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sprintf_s</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">"[+] : 0x%x\r\n"</span><span class="token punctuation">,</span> targetAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OutputDebugStringA</span><span class="token punctuation">(</span>DebugString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MH_Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> MH_OK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Create a hook for MessageBoxW, in disabled state.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MH_CreateHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>targetAddr<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>MyTest<span class="token punctuation">,</span> reinterpret_cast<span class="token operator">&lt;</span>LPVOID<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>OriginAddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> MH_OK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MH_EnableHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>targetAddr<span class="token punctuation">)</span> <span class="token operator">!=</span> MH_OK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span> HMODULE hModule<span class="token punctuation">,</span>                       DWORD  ul_reason_for_call<span class="token punctuation">,</span>                       LPVOID lpReserved                     <span class="token punctuation">)</span><span class="token punctuation">{</span>    HANDLE hThread<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token punctuation">:</span>        hThread <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPTHREAD_START_ROUTINE<span class="token punctuation">)</span>showTest<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了看到效果，我们修改一下C# ，让他不停调用test函数</p><pre class="line-numbers language-c#"><code class="language-c#">using System;using System.Reflection;namespace DemoAlice{    class Program    {        static public void Main(string[] args)        {                        while (true)            {                test(123);                //MethodInfo mi = typeof(Program).GetMethod("test");                //Console.WriteLine(string.Format("{0:X8}", (int)mi.MethodHandle.GetFunctionPointer()));            }        }        static public void test(int num)        {            int a, b, c;            a = 0x20;            b = 0x10;            c = a + b;            Console.WriteLine("someThing : " + num.ToString());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后看到效果</p><p><img src="/2021/10/13/hookCSharpWithC/8.png" alt="8.png"></p><h3 id="最后一点想法"><a href="#最后一点想法" class="headerlink" title="最后一点想法"></a>最后一点想法</h3><p>通过上述的一些简单实验，不难看出，就算是C#这种即时编译的语言，我们依旧可以从底层去做一些攻防相关的事情</p><p>依我拙见，接下来可以做的事情有：</p><p>1、由于即时编译的特性，只要函数被调用了，就会在内存的某一块地方存在相应的汇编代码。内存快速查找可以方便的定位到特征，这一点可以做很多事，比如反病毒、反木马、游戏关键逻辑修改等等。</p><p>2、有一点骚的想法是我自己注我自己，C#的功能或许可以通过上述的方式，在注入时把对应的目标汇编代码加密，然后把解密函数写到HOOK的部分，甚至把部分功能拆开写，一部分写到HOOK的逻辑里，这样的程序功能仍然能够保证，但是单独分析C#程序和注入用的DLL就比较难发现完整的逻辑，两个文件彼此之间也没有太强的联系。我认为这一点也同样可以用在攻防里。</p><p>3、。。。。</p><p>想做的事情很多，还得一个个实验过去，慢慢来吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JIT临时编译现象观察&quot;&gt;&lt;a href=&quot;#JIT临时编译现象观察&quot; class=&quot;headerlink&quot; title=&quot;JIT临时编译现象观察&quot;&gt;&lt;/a&gt;JIT临时编译现象观察&lt;/h3&gt;&lt;p&gt;为了某个目的，我设计一些简单的实验，最后做了一下笔记，以下是笔记内容</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>X64下进程的检测与隐藏</title>
    <link href="http://airshelf.github.io/2021/09/06/ProcessHideAndDetect/"/>
    <id>http://airshelf.github.io/2021/09/06/ProcessHideAndDetect/</id>
    <published>2021-09-06T03:07:17.000Z</published>
    <updated>2021-10-25T08:07:25.202Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍在R0下的，两种方法隐藏进程，以及四种方法侦测隐藏进程</p><h3 id="隐藏方法"><a href="#隐藏方法" class="headerlink" title="隐藏方法"></a>隐藏方法</h3><h5 id="Eprocess-ActiveProcessLinks断链"><a href="#Eprocess-ActiveProcessLinks断链" class="headerlink" title="Eprocess.ActiveProcessLinks断链"></a>Eprocess.ActiveProcessLinks断链</h5><p>在Eprocess结构体中，有一个名为ActiveProcessLinks双向链表，通过遍历这个双向链表，可以获取系统中所有的EPROCESS结构。</p><p>而我们想要隐藏进程就需要这条链表上没有我们的信息。</p><p>所以我们可以通过摘链表的方式，将我们的目标进程隐藏起来。</p><p>代码如下</p><pre class="line-numbers language-c"><code class="language-c">NTSTATUS <span class="token function">HideProcess</span><span class="token punctuation">(</span>PEPROCESS eProcess<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] StartHide = %llx\r\n"</span><span class="token punctuation">,</span> eProcess<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">RemoveEntryList</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>eProcess <span class="token operator">+</span> <span class="token number">0x2f0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">InitializeListHead</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>eProcess <span class="token operator">+</span> <span class="token number">0x2f0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这其中之所以要在摘除链表后，重新初始化的原因是因为：关闭进程时，系统会完成一次摘链表的操作，如果我们不初始化，则会保留本进程的前节点与后节点，导致操作系统对这两个节点进行拼接。这样一来如果它两已经不存在或者有着其他什么原因，就会导致蓝屏。</p><h5 id="全局句柄表伪装"><a href="#全局句柄表伪装" class="headerlink" title="全局句柄表伪装"></a>全局句柄表伪装</h5><p>在全局句柄表中，存放着系统的进程、线程信息。</p><p>x64下，为了拿到PspCidTable的地址，我们可以使用特征搜索的方式。</p><pre class="line-numbers language-c"><code class="language-c">PUCHAR startAddr <span class="token operator">=</span> <span class="token function">searchNtCode</span><span class="token punctuation">(</span><span class="token string">"48******F7*****74*488BD1488BC8E8"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PULONG_PTR CidTableStartAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>startAddr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x48</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x8b</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CidTableStartAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF00000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"CidTableStartAddr : 0x%llx\r\n"</span><span class="token punctuation">,</span> CidTableStartAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得一提的是64位下的运算，由于每个内核模块拥有自己的独立4G空间，所以对于每一个模块内的偏移地址计算，需要抹除高地址的进位，即以ULONG的长度进行计算。</p><p>接下来就是解析全局句柄表，将我们的目标进程的句柄从全局句柄表中抹除。</p><p>完整代码如下</p><pre class="line-numbers language-c"><code class="language-c">PUCHAR startAddr <span class="token operator">=</span> <span class="token function">searchNtCode</span><span class="token punctuation">(</span><span class="token string">"48******F7*****74*488BD1488BC8E8"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PULONG_PTR CidTableStartAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>startAddr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x48</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x8b</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CidTableStartAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF00000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"CidTableStartAddr : 0x%llx\r\n"</span><span class="token punctuation">,</span> CidTableStartAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG_PTR RealSize <span class="token operator">=</span> <span class="token operator">*</span>CidTableStartAddr<span class="token punctuation">;</span>    PULONG_PTR FirstTable <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>CidTableStartAddr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFFFFC</span><span class="token punctuation">;</span>    PULONG_PTR SecondTableAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PULONG_PTR SystemTableHandle <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ULONG_PTR i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RealSize <span class="token operator">/</span> <span class="token number">0x10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SecondTableAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>FirstTable <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        POBJECT_TYPE OneHandleType <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SecondTableAddr<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">0x1000</span> <span class="token operator">/</span> <span class="token number">0x10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                SystemTableHandle <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>SecondTableAddr <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            PVOID Object <span class="token operator">=</span> <span class="token number">0xFFFF000000000000</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>SecondTableAddr <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Object <span class="token operator">==</span> eProcess<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                OldAddr <span class="token operator">=</span> SecondTableAddr <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">;</span>                OldHandle <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>SecondTableAddr <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>SecondTableAddr <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">=</span> SystemTableHandle<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中需要注意的是，不能够将句柄表的值直接抹0，在我的实验中，如果直接抹0，会导致在隐藏进程关闭时，直接造成蓝屏。</p><p>我的处理办法是通过移花接木的方法，偷一个进程的句柄，直接填在我们的隐藏进程的句柄表的位置，这样再关闭进程，就不会蓝屏了。</p><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><h5 id="全局句柄表枚举"><a href="#全局句柄表枚举" class="headerlink" title="全局句柄表枚举"></a>全局句柄表枚举</h5><p>枚举全局句柄表方法同上</p><h5 id="Eprocess-ActiveProcessLinks链表枚举"><a href="#Eprocess-ActiveProcessLinks链表枚举" class="headerlink" title="Eprocess.ActiveProcessLinks链表枚举"></a>Eprocess.ActiveProcessLinks链表枚举</h5><p>枚举进程链表时，需要注意的是，每个链表的值都是在EPROCESS的腰上。所以需要减去相应的便宜才能获取对象地址。</p><h5 id="KTHREAD-Process-（稍强）"><a href="#KTHREAD-Process-（稍强）" class="headerlink" title="KTHREAD.Process （稍强）"></a>KTHREAD.Process （稍强）</h5><p>这个位置的值，记录的是每个线程由哪一个进程创建，所以通过这个值，能够很给力的发现一些通过上述隐藏方法隐藏的进程。而且在我的实验中，如果将线程的这个位清空，可能会导致蓝屏。所以如果进程隐藏了，查这个基本上八九不离十都能查出来。</p><h5 id="KTHREAD-ThreadListEntry遍历-（很强、不准）"><a href="#KTHREAD-ThreadListEntry遍历-（很强、不准）" class="headerlink" title="KTHREAD.ThreadListEntry遍历 （很强、不准）"></a>KTHREAD.ThreadListEntry遍历 （很强、不准）</h5><p>这个链表就更厉害了，连一些已经关闭的进程也能够查出来痕迹。同样的，如果将进程从这个链表上摘除，会导致蓝屏。所以进程隐藏对这个是没有用的。</p><p>附完整的检测代码。</p><pre class="line-numbers language-c"><code class="language-c">NTSTATUS <span class="token function">GetProcessHandleTableInfoWin10</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>    PUCHAR startAddr <span class="token operator">=</span> <span class="token function">searchNtCode</span><span class="token punctuation">(</span><span class="token string">"48******F7*****74*488BD1488BC8E8"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PULONG_PTR CidTableStartAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>startAddr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x48</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x8b</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0x05</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PULONG_PTR AllEProcess <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>PagedPool<span class="token punctuation">,</span> <span class="token number">4096</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PBOOLEAN HiddenFlags <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>PagedPool<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>AllEProcess<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4096</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>HiddenFlags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ULONG_PTR AllEProcessIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        CidTableStartAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>startAddr <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>startAddr<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF00000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"CidTableStartAddr : 0x%llx\r\n"</span><span class="token punctuation">,</span> CidTableStartAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//sprintf(result, "CidTableStartAddr : 0x%llx", CidTableStartAddr);</span>                <span class="token comment" spellcheck="true">//1.先遍历句柄表，找进程  从逻辑上来说，句柄表找到的进程都不是隐藏的</span>        <span class="token comment" spellcheck="true">//这里偷个懒，只处理二级句柄表</span>        ULONG_PTR RealSize <span class="token operator">=</span> <span class="token operator">*</span>CidTableStartAddr<span class="token punctuation">;</span>        PULONG_PTR FirstTable <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>CidTableStartAddr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFFFFC</span><span class="token punctuation">;</span>        PULONG_PTR SecondTableAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        PEPROCESS eprocess <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        ULONG PID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ULONG_PTR i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RealSize <span class="token operator">/</span> <span class="token number">0x10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SecondTableAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>FirstTable <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//KdPrintEx((77, 0, "SecondTableAddr : 0x%llx\r\n", SecondTableAddr));</span>            POBJECT_TYPE OneHandleType <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SecondTableAddr<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">0x1000</span> <span class="token operator">/</span> <span class="token number">0x10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                PVOID Object <span class="token operator">=</span> <span class="token number">0xFFFF000000000000</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>SecondTableAddr <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                PID <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">0x1000</span> <span class="token operator">/</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>PsProcessType <span class="token operator">==</span> <span class="token function">ObGetObjectType</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    HiddenFlags<span class="token punctuation">[</span>AllEProcessIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    AllEProcess<span class="token punctuation">[</span>AllEProcessIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.查进System的进程链表</span>        ULONG_PTR CurrentEntry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>AllEProcess<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x2f0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ULONG_PTR NewEntry <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>CurrentEntry<span class="token punctuation">;</span>        BOOLEAN isHidden <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> AllEProcessIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>NewEntry <span class="token operator">-</span> <span class="token number">0x2f0</span> <span class="token operator">==</span> AllEProcess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    isHidden <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isHidden<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                HiddenFlags<span class="token punctuation">[</span>AllEProcessIndex<span class="token punctuation">]</span> <span class="token operator">=</span> isHidden<span class="token punctuation">;</span>                AllEProcess<span class="token punctuation">[</span>AllEProcessIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> NewEntry <span class="token operator">-</span> <span class="token number">0x2f0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            NewEntry <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>NewEntry<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>CurrentEntry <span class="token operator">!=</span> NewEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.遍历线程的父进程，看看有没有漏网之鱼</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x800000</span><span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            PETHREAD pEthread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//if (i == 7276) DbgBreakPoint();</span>            NTSTATUS status <span class="token operator">=</span> <span class="token function">PsLookupThreadByThreadId</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>pEthread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            isHidden <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>            PEPROCESS eProcess <span class="token operator">=</span>  <span class="token function">IoThreadToProcess</span><span class="token punctuation">(</span>pEthread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>eProcess<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">*</span>PsProcessType <span class="token operator">!=</span> <span class="token function">ObGetObjectType</span><span class="token punctuation">(</span>eProcess<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>                size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> AllEProcessIndex<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eProcess <span class="token operator">==</span> AllEProcess<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        isHidden <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isHidden<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    HiddenFlags<span class="token punctuation">[</span>AllEProcessIndex<span class="token punctuation">]</span> <span class="token operator">=</span> isHidden<span class="token punctuation">;</span>                    AllEProcess<span class="token punctuation">[</span>AllEProcessIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> eProcess<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4.获取线程链表,看看有没有漏网之鱼</span>            eProcess <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>pEthread <span class="token operator">+</span> <span class="token number">0x2f8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>eProcess<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">*</span>PsProcessType <span class="token operator">!=</span> <span class="token function">ObGetObjectType</span><span class="token punctuation">(</span>eProcess<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> AllEProcessIndex<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>eProcess <span class="token operator">==</span> AllEProcess<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    isHidden <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isHidden<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                HiddenFlags<span class="token punctuation">[</span>AllEProcessIndex<span class="token punctuation">]</span> <span class="token operator">=</span> isHidden<span class="token punctuation">;</span>                AllEProcess<span class="token punctuation">[</span>AllEProcessIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> eProcess<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>AllEProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>HiddenFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> AllEProcessIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">analyzeProcess</span><span class="token punctuation">(</span>AllEProcess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> HiddenFlags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将介绍在R0下的，两种方法隐藏进程，以及四种方法侦测隐藏进程&lt;/p&gt;
&lt;h3 id=&quot;隐藏方法&quot;&gt;&lt;a href=&quot;#隐藏方法&quot; class=&quot;headerlink&quot; title=&quot;隐藏方法&quot;&gt;&lt;/a&gt;隐藏方法&lt;/h3&gt;&lt;h5 id=&quot;Eprocess-ActivePr</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>常量变换防特征</title>
    <link href="http://airshelf.github.io/2021/09/06/xorString/"/>
    <id>http://airshelf.github.io/2021/09/06/xorString/</id>
    <published>2021-09-06T02:03:46.000Z</published>
    <updated>2021-10-25T08:18:27.110Z</updated>
    
    <content type="html"><![CDATA[<p>分享一个常量预处理的库，可以实现每次编译常量随机加密，并在运行时解密的功能。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _DEBUG</span>template<span class="token operator">&lt;</span>typename _chartype<span class="token punctuation">,</span> size_t _length<span class="token operator">></span>class XorStr<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    constexpr  <span class="token function">XorStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">_chartype</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">XorStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>make_index_sequence<span class="token operator">&lt;</span>length<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// returns pointer to unencrypted string </span>    <span class="token comment" spellcheck="true">// caution: invalid if object gets destructed</span>    operator <span class="token keyword">const</span> _chartype<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// length in characters (not including 0-terminator)</span>    <span class="token keyword">static</span> constexpr size_t length <span class="token operator">=</span> _length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>private<span class="token punctuation">:</span>    template<span class="token operator">&lt;</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _indices<span class="token operator">></span>    constexpr <span class="token function">XorStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">_chartype</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>index_sequence<span class="token operator">&lt;</span>_indices<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data<span class="token punctuation">{</span> str<span class="token punctuation">[</span>_indices<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">encrypted</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    _chartype data<span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">;</span>    bool encrypted<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>template<span class="token operator">&lt;</span>typename _chartype<span class="token punctuation">,</span> size_t _length<span class="token operator">></span>constexpr <span class="token keyword">auto</span> <span class="token function">_xor_</span><span class="token punctuation">(</span>_chartype <span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> XorStr<span class="token operator">&lt;</span>_chartype<span class="token punctuation">,</span> _length<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span>template<span class="token operator">&lt;</span>typename _chartype<span class="token punctuation">,</span> size_t _length<span class="token operator">></span>class XorStr<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    constexpr  <span class="token function">XorStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">_chartype</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">XorStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>make_index_sequence<span class="token operator">&lt;</span>_length<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">XorStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> _length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// returns pointer to unencrypted string </span>    <span class="token comment" spellcheck="true">// cation: invalid if object gets destructed</span>    operator <span class="token keyword">const</span> _chartype<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// length in characters (not including 0-terminator)</span>    <span class="token keyword">static</span> constexpr size_t length <span class="token operator">=</span> _length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>private<span class="token punctuation">:</span>    template<span class="token operator">&lt;</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _indices<span class="token operator">></span>    constexpr <span class="token function">XorStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">_chartype</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>index_sequence<span class="token operator">&lt;</span>_indices<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data<span class="token punctuation">{</span> <span class="token function">crypt</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>_indices<span class="token punctuation">]</span><span class="token punctuation">,</span> _indices<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">encrypted</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> constexpr <span class="token keyword">auto</span> XOR_KEY <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>_chartype<span class="token operator">></span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token constant">__TIME__</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token punctuation">(</span><span class="token constant">__TIME__</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span>        <span class="token punctuation">(</span><span class="token constant">__TIME__</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span>        <span class="token punctuation">(</span><span class="token constant">__TIME__</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">600</span> <span class="token operator">+</span>        <span class="token punctuation">(</span><span class="token constant">__TIME__</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">+</span>        <span class="token punctuation">(</span><span class="token constant">__TIME__</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">36000</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> constexpr <span class="token keyword">auto</span> <span class="token function">crypt</span><span class="token punctuation">(</span>_chartype c<span class="token punctuation">,</span> size_t i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> static_cast<span class="token operator">&lt;</span>_chartype<span class="token operator">></span><span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>XOR_KEY <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> _length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                data<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">crypt</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            encrypted <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    _chartype data<span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">;</span>    bool encrypted<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>template<span class="token operator">&lt;</span>typename _chartype<span class="token punctuation">,</span> size_t _length<span class="token operator">></span>constexpr <span class="token keyword">auto</span> <span class="token function">_xor_</span><span class="token punctuation">(</span>_chartype <span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>_length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> XorStr<span class="token operator">&lt;</span>_chartype<span class="token punctuation">,</span> _length<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法例如</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"xorstr.hpp"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">_xor_</span><span class="token punctuation">(</span><span class="token string">"Hello World!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保护效果如图</p><p><img src="/2021/09/06/xorString/picture.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分享一个常量预处理的库，可以实现每次编译常量随机加密，并在运行时解密的功能。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro propert</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="免杀" scheme="http://airshelf.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>SSDT64位总结</title>
    <link href="http://airshelf.github.io/2021/08/22/SSDTAll/"/>
    <id>http://airshelf.github.io/2021/08/22/SSDTAll/</id>
    <published>2021-08-22T13:39:22.000Z</published>
    <updated>2021-10-25T08:04:27.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSDT表的变化"><a href="#SSDT表的变化" class="headerlink" title="SSDT表的变化"></a>SSDT表的变化</h3><p>在64位下，SSDT表在内存中的表项存储的是在KiServiceTable基础上的偏移，大小为4字节。</p><p>而在64位的内存分布下，每一个驱动都拥有自己独立的4G空间，所以如果想要对SSDT表进行HOOK，就不能采取直接替换SSDT表的方式来进行HOOK，因为无论怎么修改偏移，也无法脱离ntoskrnl.exe的程序空间。</p><p>所以我们在x64的环境下，需要采取全新的HOOK姿势（狗头）</p><h3 id="HOOK方法"><a href="#HOOK方法" class="headerlink" title="HOOK方法"></a>HOOK方法</h3><p>如果我们想要Hook64位操作系统的SSDT表，我们通常是通过ntoskrnl.exe进行一次中转（即跳板）完成对SSDT的HOOK。</p><p>例如，当我们想HOOK服务号为31的函数，我们有下面的几个步骤需要完成</p><p>1　寻找ntoskrnl.exe中的空白可执行内存A，12字节即可。</p><p>2　在内存A中写入JMP的SHELLCODE，跳向我们的HOOK处理函数。</p><p>3　计算内存A距离KiServiceTable的偏移</p><p>4　将偏移填入服务号为31的SSDT表的位置</p><p>如此，便能成功使用JMP突破4G的限制。</p><h3 id="偏移算法"><a href="#偏移算法" class="headerlink" title="偏移算法"></a>偏移算法</h3><p>在64位下，通过寻到的SSDT偏移，需要经过一点变换才能得到真实的函数地址。</p><p>具体算法如下:</p><pre class="line-numbers language-c"><code class="language-c">offset <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCH<span class="token punctuation">)</span>SsdtBase <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>offset <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SsdtFuncAddr <span class="token operator">=</span> <span class="token number">0xfffffffeffffffff</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SsdtBase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xf0000000</span> <span class="token operator">|</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    SsdtFuncAddr <span class="token operator">=</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> SsdtBase<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="边边角角的注意事项"><a href="#边边角角的注意事项" class="headerlink" title="边边角角的注意事项"></a>边边角角的注意事项</h3><p>在实际的HOOK实现中，需要注意几个点</p><p>1　SSDT表的页属性为不可写</p><p>2　通常来说，找到写跳板SHELLCODE的位置也是不可写的</p><p>3　64位下，KeServiceDescriptorTable未导出，需要通过MSR去获取</p><p>4　HOOK要记得不要破坏函数原有功能，注意保存现场</p><h3 id="HOOK代码"><a href="#HOOK代码" class="headerlink" title="HOOK代码"></a>HOOK代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ezssdt.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"../findcode.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"../EzModule/Module.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"../tools.h"</span></span>EXTERN_C <span class="token function">SSDTHookEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ULONG_PTR KeServiceDescriptorTable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ULONG_PTR hookPlace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>EXTERN_C ULONG_PTR oldFunAddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>PUCHAR gMapCheck <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>ULONG_PTR ntosklAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>ULONG_PTR ntosklSize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>BOOLEAN <span class="token function">SsdtCheckInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>gMapCheck<span class="token punctuation">)</span> <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>    PWCH path <span class="token operator">=</span> <span class="token function">GetSystemRootSYSPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       gMapCheck <span class="token operator">=</span> <span class="token function">MapOfViewFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ExFreePool</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">SsdtCheckDestory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gMapCheck<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">UmMapOfViewFile</span><span class="token punctuation">(</span>gMapCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>    gMapCheck <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>KIRQL <span class="token function">CloseWriteProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    KIRQL irql <span class="token operator">=</span> <span class="token function">KeRaiseIrqlToDpcLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG_PTR cr0 <span class="token operator">=</span> <span class="token function">__readcr0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cr0 <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xfffffffffffeffff</span><span class="token punctuation">;</span>    <span class="token function">_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__writecr0</span><span class="token punctuation">(</span>cr0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> irql<span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">OpenWriteProtection</span><span class="token punctuation">(</span>KIRQL irql<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG_PTR cr0 <span class="token operator">=</span> <span class="token function">__readcr0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cr0 <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x10000</span><span class="token punctuation">;</span>    <span class="token function">__writecr0</span><span class="token punctuation">(</span>cr0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KeLowerIrql</span><span class="token punctuation">(</span>irql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ULONG_PTR <span class="token function">GetKeServiceDescriptorTable64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//我的方法</span><span class="token punctuation">{</span>    PUCHAR StartSearchAddress <span class="token operator">=</span> <span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span><span class="token function">__readmsr</span><span class="token punctuation">(</span><span class="token number">0xC0000082</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PUCHAR EndSearchAddress <span class="token operator">=</span> StartSearchAddress <span class="token operator">+</span> <span class="token number">0x500</span><span class="token punctuation">;</span>    PUCHAR i <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    UCHAR b1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ULONG templong <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ULONG_PTR addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> StartSearchAddress<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> EndSearchAddress<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">MmIsAddressValid</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b1 <span class="token operator">=</span> <span class="token operator">*</span>i<span class="token punctuation">;</span>            b2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token number">0x4c</span> <span class="token operator">&amp;&amp;</span> b2 <span class="token operator">==</span> <span class="token number">0x8d</span> <span class="token operator">&amp;&amp;</span> b3 <span class="token operator">==</span> <span class="token number">0x15</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4c8d15</span>            <span class="token punctuation">{</span>                <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>templong<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                addr <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>templong <span class="token operator">+</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> addr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NTSTATUS <span class="token function">GetSSDTInfoX64</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>KeServiceDescriptorTable<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeServiceDescriptorTable <span class="token operator">=</span> <span class="token function">GetKeServiceDescriptorTable64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ntosklSize <span class="token operator">=</span> <span class="token function">QuerySysModule</span><span class="token punctuation">(</span><span class="token string">"ntkrnlpa.exe"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ntosklAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"KeServiceDescriptorTable : %llx\r\n"</span><span class="token punctuation">,</span> KeServiceDescriptorTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DWORD32 SsdtCount <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PDWORD32<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCH<span class="token punctuation">)</span>KeServiceDescriptorTable <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取SSDT个数</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"SsdtCount : %x\r\n"</span><span class="token punctuation">,</span> SsdtCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG_PTR SsdtBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>KeServiceDescriptorTable<span class="token punctuation">;</span>    DWORD32 offset <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    DWORD32 SafeFlag<span class="token punctuation">;</span>    ULONG_PTR SsdtFuncAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SsdtCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SafeFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        offset <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCH<span class="token punctuation">)</span>SsdtBase <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>offset <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SsdtFuncAddr <span class="token operator">=</span> <span class="token number">0xfffffffeffffffff</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SsdtBase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xf0000000</span> <span class="token operator">|</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            SsdtFuncAddr <span class="token operator">=</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> SsdtBase<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SsdtFuncAddr <span class="token operator">></span> ntosklAddr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>SsdtFuncAddr <span class="token operator">&lt;</span> <span class="token punctuation">(</span>ntosklAddr <span class="token operator">+</span> ntosklSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SafeFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"%s%d\t%llx\t%d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> i<span class="token punctuation">,</span> SsdtFuncAddr<span class="token punctuation">,</span> SafeFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"ntosklAddr : %llx\r\n"</span><span class="token punctuation">,</span> ntosklAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"%s%llx\t%llx\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> ntosklAddr<span class="token punctuation">,</span> <span class="token punctuation">(</span>SsdtBase <span class="token operator">-</span> ntosklAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span>EXTERN_C VOID <span class="token function">RealHookFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"oldFunAddr : %llx\thookPlace : %llx\r\n"</span><span class="token punctuation">,</span> oldFunAddr<span class="token punctuation">,</span> hookPlace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">FuckBlankArea</span><span class="token punctuation">(</span>PULONG_PTR hookPlace<span class="token punctuation">)</span><span class="token punctuation">{</span>    KIRQL irql<span class="token punctuation">;</span>    ULONGLONG myfun<span class="token punctuation">;</span>    UCHAR jmp_code<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x48\xB8\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\xFF\xE0"</span><span class="token punctuation">;</span>    myfun <span class="token operator">=</span> <span class="token punctuation">(</span>ULONGLONG<span class="token punctuation">)</span>SSDTHookEntry<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>jmp_code <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>myfun<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    irql <span class="token operator">=</span> <span class="token function">CloseWriteProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>hookPlace<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hookPlace<span class="token punctuation">,</span> jmp_code<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OpenWriteProtection</span><span class="token punctuation">(</span>irql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">SaveFuncAddress</span><span class="token punctuation">(</span>ULONG id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ULONG_PTR SsdtBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>KeServiceDescriptorTable<span class="token punctuation">;</span>    DWORD32 offset <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    DWORD32 SafeFlag<span class="token punctuation">;</span>    ULONG_PTR SsdtFuncAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    offset <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCH<span class="token punctuation">)</span>SsdtBase <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SsdtFuncAddr <span class="token operator">=</span> <span class="token number">0xfffffffeffffffff</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SsdtBase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xf0000000</span> <span class="token operator">|</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        SsdtFuncAddr <span class="token operator">=</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> SsdtBase<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    oldFunAddr <span class="token operator">=</span> SsdtFuncAddr<span class="token punctuation">;</span><span class="token punctuation">}</span>ULONG <span class="token function">GetOffsetAddress</span><span class="token punctuation">(</span>ULONGLONG FuncAddr<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG dwtmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ULONG_PTR SsdtBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>KeServiceDescriptorTable<span class="token punctuation">;</span>    dwtmp <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span><span class="token punctuation">(</span>FuncAddr <span class="token operator">-</span> <span class="token punctuation">(</span>ULONGLONG<span class="token punctuation">)</span>SsdtBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dwtmp <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">HookSSDT</span><span class="token punctuation">(</span>ULONG id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFunAddr<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    KIRQL irql<span class="token punctuation">;</span>    ULONGLONG dwtmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PULONG SsdtBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>KeServiceDescriptorTable<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hookPlace<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        hookPlace <span class="token operator">=</span> <span class="token function">searchCode</span><span class="token punctuation">(</span><span class="token string">"ntoskrnl.exe"</span><span class="token punctuation">,</span> <span class="token string">".text"</span><span class="token punctuation">,</span> <span class="token string">"000000000000000000000000000000"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FuckBlankArea</span><span class="token punctuation">(</span>hookPlace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">SaveFuncAddress</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    irql <span class="token operator">=</span> <span class="token function">CloseWriteProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SsdtBase<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetOffsetAddress</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONGLONG<span class="token punctuation">)</span>hookPlace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OpenWriteProtection</span><span class="token punctuation">(</span>irql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">UnHookSSDT</span><span class="token punctuation">(</span>ULONG id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFunAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    KIRQL irql<span class="token punctuation">;</span>    ULONGLONG dwtmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PULONG SsdtBase <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span>KeServiceDescriptorTable<span class="token punctuation">;</span>    irql <span class="token operator">=</span> <span class="token function">CloseWriteProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SsdtBase<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetOffsetAddress</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONGLONG<span class="token punctuation">)</span>oldFunAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>hookPlace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OpenWriteProtection</span><span class="token punctuation">(</span>irql<span class="token punctuation">)</span><span class="token punctuation">;</span>    oldFunAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    hookPlace <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SSDT-Hook的检测"><a href="#SSDT-Hook的检测" class="headerlink" title="SSDT Hook的检测"></a>SSDT Hook的检测</h3><p>32位下的检测方法，通常是直接判断SSDT调用的函数是否是ntoskrnl.exe模块内的即可判断是否SSDT被HOOK了。</p><p>而通过上述64位下的代码，可以知道这种检测方法已经失效，因为修改后的调用地址仍然在ntoskrnl.exe模块内。</p><p>所以我们的检测方法同样需要更新</p><p>具有通用性的检测方法是将文件原始数据与内存数据做对比，判断是否被修改过。</p><p>这个判断可以直接在R3下完成。</p><p>检测的地方也有坑点，比如Win7下文件映像中SSDT表项为8字节、而Win10则为4字节。</p><h3 id="SSDT检测代码"><a href="#SSDT检测代码" class="headerlink" title="SSDT检测代码"></a>SSDT检测代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SsdtCheck.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>HMODULE hModule <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>ULONG_PTR <span class="token function">GetOriServiceAddr</span><span class="token punctuation">(</span>DWORD ServiceId<span class="token punctuation">,</span>DWORD TableOffset<span class="token punctuation">,</span>ULONG_PTR baseaddr<span class="token punctuation">,</span> DWORD OsMode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hModule<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    ULONGLONG ServiceAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>OsMode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ServiceAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCH<span class="token punctuation">)</span>hModule <span class="token operator">+</span> TableOffset <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> ServiceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> baseaddr <span class="token operator">+</span> ServiceAddr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        ServiceAddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONGLONG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCH<span class="token punctuation">)</span>hModule <span class="token operator">+</span> TableOffset <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> ServiceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> baseaddr <span class="token operator">+</span> ServiceAddr <span class="token operator">-</span> <span class="token punctuation">(</span>ULONGLONG<span class="token punctuation">)</span>hModule<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>EXTERN_C  <span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> PCH <span class="token function">GetAllChecks</span><span class="token punctuation">(</span>DWORD MaxId<span class="token punctuation">,</span> DWORD TableOffset<span class="token punctuation">,</span> ULONG_PTR baseaddr<span class="token punctuation">,</span>DWORD OsMode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hModule<span class="token punctuation">)</span>hModule <span class="token operator">=</span> <span class="token function">LoadLibraryA</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32\\ntoskrnl.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PCH result <span class="token operator">=</span> <span class="token punctuation">(</span>PCH<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG_PTR tmpAdd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxId<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmpAdd <span class="token operator">=</span> <span class="token function">GetOriServiceAddr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> TableOffset<span class="token punctuation">,</span> baseaddr<span class="token punctuation">,</span> OsMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"%s%llx\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span>tmpAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h3><p><img src="/2021/08/22/SSDTAll/SSDT.gif" alt="SSDT.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SSDT表的变化&quot;&gt;&lt;a href=&quot;#SSDT表的变化&quot; class=&quot;headerlink&quot; title=&quot;SSDT表的变化&quot;&gt;&lt;/a&gt;SSDT表的变化&lt;/h3&gt;&lt;p&gt;在64位下，SSDT表在内存中的表项存储的是在KiServiceTable基础上的偏移，大小</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>键盘驱动过滤</title>
    <link href="http://airshelf.github.io/2021/08/16/KbdDriver/"/>
    <id>http://airshelf.github.io/2021/08/16/KbdDriver/</id>
    <published>2021-08-16T09:17:53.000Z</published>
    <updated>2021-10-25T08:16:39.499Z</updated>
    
    <content type="html"><![CDATA[<p>在R3对键盘进行监控容易被查。我们可以通过附加驱动设备的方式，对键盘设备的IRP包过滤，从而修改达到键盘监控、修改的效果。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntddkbd.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _DEVICE_EXTENSION<span class="token punctuation">{</span>    PDRIVER_OBJECT pDriverObject<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//驱动对象</span>    PDEVICE_OBJECT pDevice<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设备对象</span>    PDEVICE_OBJECT pTarget<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//挂载的下层</span>    LONG nIrpsInQueue<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Irp 队列中剩余 未操作完成的IRP数量</span>    PIRP pLastIrp<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//保存每次转发的IRP，当卸载驱动的时候这个保存的是最后一个IRP</span>                            <span class="token comment" spellcheck="true">//通过取消这个IRP 来完成所有的IRP</span><span class="token punctuation">}</span>DEVICE_EXTENSION<span class="token punctuation">,</span><span class="token operator">*</span>PDEVICE_EXTENSION<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层设备完成IRP之后调用此函数</span><span class="token comment" spellcheck="true">//在此函数中完成对数据的修改</span>NTSTATUS <span class="token function">ReadCompleteRoutine</span><span class="token punctuation">(</span>PDEVICE_OBJECT pDeviceObject<span class="token punctuation">,</span>    PIRP Irp<span class="token punctuation">,</span>    PVOID pContext<span class="token punctuation">)</span><span class="token punctuation">{</span>    NTSTATUS status <span class="token operator">=</span> STATUS_UNSUCCESSFUL<span class="token punctuation">;</span>    PKEYBOARD_INPUT_DATA pKID<span class="token punctuation">;</span>    <span class="token keyword">int</span> iNum<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//按键数量</span>        i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for 循环用的</span>    PDEVICE_OBJECT pDeviceFilter <span class="token operator">=</span> <span class="token punctuation">(</span>PDEVICE_OBJECT<span class="token punctuation">)</span>pDeviceObject<span class="token punctuation">;</span>    PDEVICE_EXTENSION pExt <span class="token operator">=</span> <span class="token punctuation">(</span>PDEVICE_EXTENSION<span class="token punctuation">)</span>pDeviceFilter<span class="token operator">-></span>DeviceExtension<span class="token punctuation">;</span>    status <span class="token operator">=</span> Irp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成功IRP</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//缓冲区保存了多个 按键信息</span>        pKID <span class="token operator">=</span> <span class="token punctuation">(</span>PKEYBOARD_INPUT_DATA<span class="token punctuation">)</span>Irp<span class="token operator">-></span>AssociatedIrp<span class="token punctuation">.</span>SystemBuffer<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按键数量</span>        iNum <span class="token operator">=</span> Irp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Information <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEYBOARD_INPUT_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>pKID<span class="token operator">-></span>Flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> KEY_MAKE<span class="token punctuation">:</span>                <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] %d Down\n"</span><span class="token punctuation">,</span> pKID<span class="token operator">-></span>MakeCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> KEY_BREAK<span class="token punctuation">:</span>                <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] %d Up\n"</span><span class="token punctuation">,</span> pKID<span class="token operator">-></span>MakeCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//可以添加上这这一句，然后按键全部被改为了 按下 A</span>            pKID<span class="token operator">-></span>MakeCode <span class="token operator">=</span> <span class="token number">0x1e</span><span class="token punctuation">;</span>            pKID<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Irp<span class="token operator">-></span>PendingReturned<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">IoMarkIrpPending</span><span class="token punctuation">(</span>Irp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pExt<span class="token operator">-></span>nIrpsInQueue<span class="token operator">--</span><span class="token punctuation">;</span>    status <span class="token operator">=</span> Irp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Status<span class="token punctuation">;</span>    <span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//默认处理方式</span>NTSTATUS <span class="token function">DefHandler</span><span class="token punctuation">(</span>PDEVICE_OBJECT DeviceObject<span class="token punctuation">,</span> PIRP Irp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IoSkipCurrentIrpStackLocation</span><span class="token punctuation">(</span>Irp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转发</span>    <span class="token keyword">return</span> <span class="token function">IoCallDriver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PDEVICE_EXTENSION<span class="token punctuation">)</span>DeviceObject<span class="token operator">-></span>DeviceExtension<span class="token punctuation">)</span><span class="token operator">-></span>pTarget<span class="token punctuation">,</span> Irp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理irp并添加回调</span>NTSTATUS <span class="token function">HandlerRead</span><span class="token punctuation">(</span>PDEVICE_OBJECT DeviceObject<span class="token punctuation">,</span> PIRP Irp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NTSTATUS status <span class="token operator">=</span> STATUS_UNSUCCESSFUL<span class="token punctuation">;</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] READ:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PDEVICE_EXTENSION pExt <span class="token operator">=</span> <span class="token punctuation">(</span>PDEVICE_EXTENSION<span class="token punctuation">)</span>DeviceObject<span class="token operator">-></span>DeviceExtension<span class="token punctuation">;</span>    <span class="token function">IoCopyCurrentIrpStackLocationToNext</span><span class="token punctuation">(</span>Irp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IoSetCompletionRoutine</span><span class="token punctuation">(</span>Irp<span class="token punctuation">,</span> ReadCompleteRoutine<span class="token punctuation">,</span> DeviceObject<span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加IRP 队列长度</span>    pExt<span class="token operator">-></span>nIrpsInQueue<span class="token operator">++</span><span class="token punctuation">;</span>    pExt<span class="token operator">-></span>pLastIrp <span class="token operator">=</span> Irp<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">IoCallDriver</span><span class="token punctuation">(</span>pExt<span class="token operator">-></span>pTarget<span class="token punctuation">,</span> Irp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//电源处理函数，XP必须指定 Vista 以上可以忽略</span>NTSTATUS <span class="token function">HandlerPower</span><span class="token punctuation">(</span>PDEVICE_OBJECT DeviceObject<span class="token punctuation">,</span> PIRP Irp<span class="token punctuation">)</span><span class="token punctuation">{</span>    PDEVICE_EXTENSION pExt <span class="token operator">=</span> <span class="token punctuation">(</span>PDEVICE_EXTENSION<span class="token punctuation">)</span>DeviceObject<span class="token operator">-></span>DeviceExtension<span class="token punctuation">;</span>    <span class="token function">PoStartNextPowerIrp</span><span class="token punctuation">(</span>Irp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IoSkipCurrentIrpStackLocation</span><span class="token punctuation">(</span>Irp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">PoCallDriver</span><span class="token punctuation">(</span>pExt<span class="token operator">-></span>pTarget<span class="token punctuation">,</span> Irp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//安装键盘钩子</span>NTSTATUS <span class="token function">HookKbdRead</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriverObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NTSTATUS status <span class="token operator">=</span> STATUS_UNSUCCESSFUL<span class="token punctuation">;</span>    PDEVICE_OBJECT pDevice<span class="token punctuation">;</span>    PDEVICE_EXTENSION pExt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    UNICODE_STRING uFdevice<span class="token punctuation">;</span>    <span class="token function">RtlInitUnicodeString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uFdevice<span class="token punctuation">,</span> L<span class="token string">"\\Device\\f012345555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//首先创建自己的过滤设备</span>    status <span class="token operator">=</span> <span class="token function">IoCreateDevice</span><span class="token punctuation">(</span>pDriverObject<span class="token punctuation">,</span>        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DEVICE_EXTENSION<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>uFdevice<span class="token punctuation">,</span>        FILE_DEVICE_KEYBOARD<span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        FALSE<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] Create Filter Failed...\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pExt <span class="token operator">=</span> <span class="token punctuation">(</span>PDEVICE_EXTENSION<span class="token punctuation">)</span>pDevice<span class="token operator">-></span>DeviceExtension<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化设备扩展</span>    pExt<span class="token operator">-></span>nIrpsInQueue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pExt<span class="token operator">-></span>pDevice <span class="token operator">=</span> pDevice<span class="token punctuation">;</span>    pExt<span class="token operator">-></span>pDriverObject <span class="token operator">=</span> pDriverObject<span class="token punctuation">;</span>    pExt<span class="token operator">-></span>pTarget <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取到键盘驱动指针</span>    UNICODE_STRING uKeyDevice<span class="token punctuation">;</span>    PFILE_OBJECT pKeyFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PDEVICE_OBJECT pTargetDevice <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">RtlInitUnicodeString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uKeyDevice<span class="token punctuation">,</span> L<span class="token string">"\\Device\\KeyboardClass0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取到键盘设备栈顶 的设备</span>    status <span class="token operator">=</span> <span class="token function">IoGetDeviceObjectPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uKeyDevice<span class="token punctuation">,</span> GENERIC_READ <span class="token operator">|</span> GENERIC_WRITE<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pKeyFile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pTargetDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引用-1</span>    <span class="token function">ObReferenceObject</span><span class="token punctuation">(</span>pKeyFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] IoGetDeviceObjectPointer Failed\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IoDeleteDevice</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//执行绑定操作</span>    pExt<span class="token operator">-></span>pTarget <span class="token operator">=</span> <span class="token function">IoAttachDeviceToDeviceStack</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">,</span> pTargetDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pExt<span class="token operator">-></span>pTarget <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">IoDeleteDevice</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] Bind Filter Successful!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDevice<span class="token operator">-></span>Flags <span class="token operator">|</span><span class="token operator">=</span> DO_BUFFERED_IO <span class="token operator">|</span> DO_POWER_PAGABLE<span class="token punctuation">;</span>    pDevice<span class="token operator">-></span>ActiveThreadCount <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>DO_DEVICE_INITIALIZING<span class="token punctuation">;</span>    status <span class="token operator">=</span> STATUS_SUCCESS<span class="token punctuation">;</span>    <span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//卸载驱动</span><span class="token keyword">void</span> <span class="token function">UnLoad</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriverObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PDEVICE_OBJECT pDevice <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    LARGE_INTEGER liDelay<span class="token punctuation">;</span>    pDevice <span class="token operator">=</span> pDriverObject<span class="token operator">-></span>DeviceObject<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pDevice<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pDevice<span class="token operator">-></span>DeviceExtension <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PDEVICE_EXTENSION pExt <span class="token operator">=</span> <span class="token punctuation">(</span>PDEVICE_EXTENSION<span class="token punctuation">)</span>pDevice<span class="token operator">-></span>DeviceExtension<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//首先要移除设备栈,移除之后的IRP将不会被过滤</span>    <span class="token function">IoDetachDevice</span><span class="token punctuation">(</span>pExt<span class="token operator">-></span>pTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对于为完成的IRP，因为只前通过IoSetCompletionRoutine已经设置IO完成例程</span>    <span class="token comment" spellcheck="true">//那么对于未完成的IRP ，在完成之后会调用 该层设备的函数</span>    <span class="token comment" spellcheck="true">//如果 IRP队列还在，这时候直接删除设备</span>    <span class="token comment" spellcheck="true">//当剩余的IRP 完成之后 之前设置的IO完成例程已经不存在了</span>    <span class="token comment" spellcheck="true">//这样会照成 蓝屏</span>    <span class="token comment" spellcheck="true">//所以需要等待 IO 完成之后再去删除 该层设备</span>    liDelay<span class="token punctuation">.</span>QuadPart <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1000000</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pExt<span class="token operator">-></span>nIrpsInQueue <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">KeDelayExecutionThread</span><span class="token punctuation">(</span>KernelMode<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>liDelay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] Left IRP : %d\r\n"</span><span class="token punctuation">,</span> pExt<span class="token operator">-></span>nIrpsInQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pExt<span class="token operator">-></span>nIrpsInQueue <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取消掉最后一个IRP</span>            <span class="token function">IoCancelIrp</span><span class="token punctuation">(</span>pExt<span class="token operator">-></span>pLastIrp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移除设备</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] Driver Unloaded\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IoDeleteDevice</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span> NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>IN PDRIVER_OBJECT DriverObject<span class="token punctuation">,</span> IN PUNICODE_STRING  RegistryPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>IN PDRIVER_OBJECT DriverObject<span class="token punctuation">,</span> IN PUNICODE_STRING  RegistryPath<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"[+] Driver Loaded\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DriverObject<span class="token operator">-></span>MajorFunction<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> DefHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拦截Read</span>    DriverObject<span class="token operator">-></span>MajorFunction<span class="token punctuation">[</span>IRP_MJ_READ<span class="token punctuation">]</span> <span class="token operator">=</span> HandlerRead<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电源处理</span>    DriverObject<span class="token operator">-></span>MajorFunction<span class="token punctuation">[</span>IRP_MJ_POWER<span class="token punctuation">]</span> <span class="token operator">=</span> HandlerPower<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//卸载</span>    DriverObject<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnLoad<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//安装过滤</span>    <span class="token keyword">return</span> <span class="token function">HookKbdRead</span><span class="token punctuation">(</span>DriverObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图所示</p><p><img src="/2021/08/16/KbdDriver/image.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在R3对键盘进行监控容易被查。我们可以通过附加驱动设备的方式，对键盘设备的IRP包过滤，从而修改达到键盘监控、修改的效果。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span cla</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>未文档化的函数的记录</title>
    <link href="http://airshelf.github.io/2021/08/15/unDocumentedFunc/"/>
    <id>http://airshelf.github.io/2021/08/15/unDocumentedFunc/</id>
    <published>2021-08-15T11:52:38.000Z</published>
    <updated>2021-10-25T08:03:50.794Z</updated>
    
    <content type="html"><![CDATA[<p>未文档化导出函数：</p><hr><pre class="line-numbers language-c"><code class="language-c">EXTERN_C HANDLE <span class="token function">PsGetThreadId</span><span class="token punctuation">(</span>__in PETHREAD Thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数用于获取<code>_EPROCESS.CID.UniqueThread</code></p><hr><pre class="line-numbers language-c"><code class="language-c">EXTERN_C HANDLE <span class="token function">PsGetThreadProcessId</span><span class="token punctuation">(</span> __in PETHREAD Thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数用于获取<code>_EPROCESS.CID.UniqueProcess</code></p><hr><pre class="line-numbers language-c"><code class="language-c">EXTERN_C PVOID NTAPI <span class="token function">PsGetProcessWow64Process</span><span class="token punctuation">(</span>PEPROCESS Process<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数用于获取<code>_EPROCESS.WoW64Process</code></p><hr><pre class="line-numbers language-c"><code class="language-c">EXTERN_C PVOID NTAPI <span class="token function">PsGetProcessPeb</span><span class="token punctuation">(</span>PEPROCESS Process<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数用于获取<code>_EPROCESS.Peb</code></p><hr><pre class="line-numbers language-c"><code class="language-c">NTSTATUS <span class="token function">MmCopyVirtualMemory</span><span class="token punctuation">(</span>    IN PEPROCESS FromProcess<span class="token punctuation">,</span>    IN CONST VOID <span class="token operator">*</span>FromAddress<span class="token punctuation">,</span>    IN PEPROCESS ToProcess<span class="token punctuation">,</span>    OUT PVOID ToAddress<span class="token punctuation">,</span>    IN SIZE_T BufferSize<span class="token punctuation">,</span>    IN KPROCESSOR_MODE PreviousMode<span class="token punctuation">,</span>    OUT PSIZE_T NumberOfBytesCopied<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NtWriteProcessMemory / NtReadProcessMemory 都是通过这个函数进行实现的。</p><p>可以通过这个函数避免内存缺页造成蓝屏的问题。</p><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 声明微软未公开的ObReferenceObjectByName()函数</span>NTSTATUS <span class="token function">ObReferenceObjectByName</span><span class="token punctuation">(</span>    PUNICODE_STRING ObjectName<span class="token punctuation">,</span>    ULONG Attributes<span class="token punctuation">,</span>    PACCESS_STATE AccessState<span class="token punctuation">,</span>    ACCESS_MASK DesiredAccess<span class="token punctuation">,</span>    POBJECT_TYPE ObjectType<span class="token punctuation">,</span>    KPROCESSOR_MODE AccessMode<span class="token punctuation">,</span>    PVOID ParseContest<span class="token punctuation">,</span>    PVOID<span class="token operator">*</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> POBJECT_TYPE<span class="token operator">*</span> IoDriverObjectType<span class="token punctuation">;</span><span class="token keyword">extern</span> POBJECT_TYPE<span class="token operator">*</span> IoDeviceObjectType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这个函数可以通过设备\驱动名字找到设备\驱动对象。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;未文档化导出函数：&lt;/p&gt;
&lt;hr&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;EXTERN_C HANDLE &lt;span class=&quot;token function&quot;&gt;PsGetThread</summary>
      
    
    
    
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
    <category term="笔记" scheme="http://airshelf.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>专有名词及解释</title>
    <link href="http://airshelf.github.io/2021/08/15/Names/"/>
    <id>http://airshelf.github.io/2021/08/15/Names/</id>
    <published>2021-08-15T11:51:29.000Z</published>
    <updated>2021-10-25T08:07:13.690Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td>描述符</td><td>指用来描述一件事物的“结构体”。如缓冲描述符，描述了一个缓冲的基址、长度等信息。</td></tr><tr><td>中断描述符</td><td>描述了那个中断向量对应的分配状态、isr 等信息</td></tr><tr><td>Entry</td><td>指表中的表项、条目，有时也指函数入口</td></tr><tr><td>SSDT</td><td>基本系统服务表(其实全称应叫系统服务派遣表)</td></tr><tr><td>Shadow SSDT</td><td>GUI/GDI 系统服务函数表，这是第二张 SSDT</td></tr><tr><td>SSDTDT</td><td>系统服务表描述符表，表中每个元素是一个 SSDT 描述符(注意内核中有两张 SSDT 和两张 SSDTDT)</td></tr><tr><td>GDT</td><td>全局描述符表</td></tr><tr><td>IDT</td><td>中断描述符表，每个cpu 一个。(每个表项是一个描述符，可以简单视为 isr)</td></tr><tr><td>ISR</td><td>中断服务例程，IDT 表中的中断描述符所描述的中断处理函数</td></tr><tr><td>EPR</td><td>异常处理例程，IDT 表中的异常描述符所描述的异常处理函数</td></tr><tr><td>VA</td><td>虚拟地址</td></tr><tr><td>PA</td><td>物理地址</td></tr><tr><td>LA</td><td>线性地址</td></tr><tr><td>RVA</td><td>相对虚拟地址</td></tr><tr><td>FOA</td><td>文件偏移</td></tr><tr><td>PDE</td><td>页目录中的表项，保存着对应二级页表的物理地址，又叫“二级页表描述符”</td></tr><tr><td>PTE</td><td>二级页表中的表项，真正记录着每个虚拟页面的映射情况以及其他信息，又叫“映射描述符”</td></tr><tr><td>页目录</td><td>(又叫一级页表、总页表)，一个 PDE 数组，这个数组的大小刚好占据一个页面</td></tr><tr><td>二级页表</td><td>一个 PTE 数组，这个数组的大小也刚好占据一个页面(进程有一个总页表+1024 个二级页表)</td></tr><tr><td>AREA</td><td>地址空间中的一块连续的区段，VirtualAlloc 分配内存都是以区段为单位</td></tr><tr><td>内存分配</td><td>表示从地址空间中用 VirtualAlloc 预定或者提交映射一块内存，不是指 malloc、new、HeapAlloc</td></tr><tr><td>PID</td><td>进程 ID、进程号。(其实也是个句柄)</td></tr><tr><td>TID</td><td>线程 ID、线程号。(其实也是个句柄)</td></tr><tr><td>PDO</td><td>物理设备对象，相对于 fdo 而言。Pdo 并不一定是最底层的那个硬件</td></tr><tr><td>FDO</td><td>功能设备对象，相对于 pdo 而言。Fdo 也可能直接访问硬件芯片。fdo 与 pdo 只是一种相对概念。</td></tr><tr><td>栈底pdo</td><td>又叫基石pdo，硬件pdo，指用作堆栈基石的那个pdo，它是由相应的总线驱动内部创建的</td></tr><tr><td>端口设备对象</td><td>端口驱动或者小端口驱动中创建的设备对象(他下面是硬件 pdo)</td></tr><tr><td>总线驱动</td><td>用来驱动总线的驱动(总线本身也是一种特殊的设备)，如 pci.sys 总线驱动</td></tr><tr><td>端口驱动</td><td>由厂家提供的真正用来直接访问硬件芯片的驱动，位于总线驱动上层</td></tr><tr><td>功能驱动</td><td>指类驱动。如鼠标类驱动 mouseclass.sys，磁盘类驱动 disk.sys</td></tr><tr><td>上层过滤驱动</td><td>位于功能类驱动上面的驱动</td></tr><tr><td>下层过滤驱动</td><td>位于功能驱动下面，端口驱动上面的驱动</td></tr><tr><td>顶层驱动</td><td>指位于栈顶的驱动</td></tr><tr><td>中间驱动</td><td>intermediate drivers，凡是夹在顶层驱动与端口驱动之间的那些驱动都叫中间驱动</td></tr><tr><td>设备树</td><td>由 PnP 管理器构造的一颗用来反映物理总线布局的‘硬件设备树’。</td></tr><tr><td>设备节点</td><td>设备树中的节点。每个节点都表示一个真正的‘硬件 pdo’</td></tr><tr><td>老式驱动</td><td>即 NT 式驱动，指不提供 AddDevice 或通过 NtLoadDriver 加载的驱动</td></tr><tr><td>WDM 驱动</td><td>指提供了 AddDevice 并且不是通过 NtLoadDriver 加载的驱动</td></tr><tr><td>IRP 派遣例程</td><td>又叫分发例程、派遣函数。驱动程序中用来响应处理 irp 的函数。(Dispatch)</td></tr><tr><td>设备绑定</td><td>指将设备‘堆栈’到原栈顶设备上面，成为新的栈顶设备。</td></tr><tr><td>文件</td><td>指物理介质上的文件(磁盘、光盘、U 盘)</td></tr><tr><td>文件对象</td><td>每次打开设备时生成一个文件对象(文件对象不是文件，仅仅表示对设备的一次打开上下文，因此文件对象又叫打开者)</td></tr><tr><td>套接字驱动</td><td>afd.sys</td></tr><tr><td>套接字设备</td><td>\Device\Afd\Endpoint</td></tr><tr><td>套接字文件对象</td><td>每打开一次套接字设备生成一个套接字文件对象</td></tr><tr><td>套接字FCB</td><td>每个套接字文件对象关联的FCB，用来描述套接字的其他信息</td></tr><tr><td>地址文件对象</td><td>每次打开传输层的tdi设备时生成的一个文件对象，用于套接字绑定</td></tr><tr><td>地址对象</td><td>传输层中为每个地址文件对象创建一个地址对象，用来描述一个地址(IP、端口号、协议等)</td></tr><tr><td>Socket irp</td><td>发往 afd 套接字设备(即\Device\Afd\Endpoint)的irp</td></tr><tr><td>Tdi irp</td><td>发往传输层设备(即\Device\Tcp,\Device\Udp,\Device\RawIp)的 irp</td></tr><tr><td>物理卷设备</td><td>指磁盘卷、光盘卷、磁带卷等物理卷设备，由相应类型的硬件驱动创建</td></tr><tr><td>磁盘卷设备</td><td>指磁盘分区，设备对象名为\Device\HarddiskN\PartitionN 形式(N 从 0 开始)</td></tr><tr><td>文件卷设备</td><td>由文件系统内部创建的挂载(即绑定)在物理卷上的匿名设备</td></tr><tr><td>Cdo</td><td>控制设备对象。一个驱动通常创建有一个cdo，用来与外界通信。</td></tr><tr><td>FSD</td><td>文件系统驱动，File System Driver缩写。</td></tr><tr><td>簇</td><td>文件以簇为分配单位。一个文件包含N个簇，簇之间不必物理连续，一个簇一般为 4KB</td></tr><tr><td>扇区</td><td>系统以扇区为单位进行磁盘 IO。一个簇包含 N 个扇区，一个扇区一般为 512B</td></tr><tr><td>文件块</td><td>磁盘文件中的文件块，对应于内核中的文件缓冲段</td></tr><tr><td>缓冲段</td><td>文件块在内核中的缓冲</td></tr><tr><td>ACL</td><td>访问控制表。每个 Ntfs 文件、内核对象都有一份 ACL，记录了各用户、组的访问权限</td></tr><tr><td>Token</td><td>访问令牌。每个线程、进程都有一个 Token，记录了包含的特权、用户、组等信息</td></tr><tr><td>SID</td><td>指用户 ID、组 ID、机器 ID，用来唯一标识。</td></tr><tr><td>主令牌</td><td>进程自己的令牌</td></tr><tr><td>客户令牌</td><td>也即模拟令牌。每个线程默认使用进程的令牌，但也可模式使用其他进程的令牌</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;术语&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;描述符&lt;/td&gt;
&lt;td&gt;指用来描述一件事物的“结构体”。如缓冲描述符，描述了一个缓冲的基址、长度等信息。&lt;/td&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
    <category term="笔记" scheme="http://airshelf.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>X64下内核注入用户APC</title>
    <link href="http://airshelf.github.io/2021/08/15/x64ApcInjection/"/>
    <id>http://airshelf.github.io/2021/08/15/x64ApcInjection/</id>
    <published>2021-08-15T11:39:27.000Z</published>
    <updated>2021-10-25T08:03:19.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注入32位用户APC"><a href="#注入32位用户APC" class="headerlink" title="注入32位用户APC"></a>注入32位用户APC</h3><p>需要注意的是，64位下寻址32位的地址，需要做一次封装。</p><p>可以使用导出函数：</p><pre class="line-numbers language-c"><code class="language-c">EXTERN_C NTSTATUS <span class="token function">PsWrapApcWow64Thread</span><span class="token punctuation">(</span>PVOID<span class="token operator">*</span> ApcContext<span class="token punctuation">,</span> PVOID<span class="token operator">*</span> ApcRoutine<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整的代码如下</p><p>R0：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> _KAPC_ENVIRONMENT <span class="token punctuation">{</span>    OriginalApcEnvironment<span class="token punctuation">,</span>    AttachedApcEnvironment<span class="token punctuation">,</span>    CurrentApcEnvironment<span class="token punctuation">,</span>    InsertApcEnvironment<span class="token punctuation">}</span> KAPC_ENVIRONMENT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKNORMAL_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN PVOID NormalContext<span class="token punctuation">,</span>    IN PVOID SystemArgument1<span class="token punctuation">,</span>    IN PVOID SystemArgument2    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKKERNEL_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc<span class="token punctuation">,</span>    IN OUT PKNORMAL_ROUTINE<span class="token operator">*</span> NormalRoutine<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> NormalContext<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument1<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument2    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKRUNDOWN_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc    <span class="token punctuation">)</span><span class="token punctuation">;</span>VOID <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>    __out PRKAPC Apc<span class="token punctuation">,</span>    __in PRKTHREAD Thread<span class="token punctuation">,</span>    __in KAPC_ENVIRONMENT Environment<span class="token punctuation">,</span>    __in PKKERNEL_ROUTINE KernelRoutine<span class="token punctuation">,</span>    __in_opt PKRUNDOWN_ROUTINE RundownRoutine<span class="token punctuation">,</span>    __in_opt PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">,</span>    __in_opt KPROCESSOR_MODE ApcMode<span class="token punctuation">,</span>    __in_opt PVOID NormalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOLEAN <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>    __inout PRKAPC Apc<span class="token punctuation">,</span>    __in_opt PVOID SystemArgument1<span class="token punctuation">,</span>    __in_opt PVOID SystemArgument2<span class="token punctuation">,</span>    __in KPRIORITY Increment<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOLEAN<span class="token function">KeAlertThread</span><span class="token punctuation">(</span>    __inout PKTHREAD Thread<span class="token punctuation">,</span>    __in KPROCESSOR_MODE AlertMode<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERN_C NTSTATUS <span class="token function">PsWrapApcWow64Thread</span><span class="token punctuation">(</span>PVOID<span class="token operator">*</span> ApcContext<span class="token punctuation">,</span> PVOID<span class="token operator">*</span> ApcRoutine<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERN_C HANDLE <span class="token function">PsGetThreadProcessId</span><span class="token punctuation">(</span>__in PETHREAD Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERN_C VOID <span class="token function">kernelRoutineFunc</span><span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc<span class="token punctuation">,</span>    IN OUT PKNORMAL_ROUTINE<span class="token operator">*</span> NormalRoutine<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> NormalContext<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument1<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:kernelRoutineFunc pid : %d\r\n"</span><span class="token punctuation">,</span> <span class="token function">PsGetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG64 addr <span class="token operator">=</span> <span class="token number">0x401000</span><span class="token punctuation">;</span>    <span class="token function">PsWrapApcWow64Thread</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">////DbgBreakPoint();</span>    <span class="token operator">*</span>NormalRoutine <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token function">ExFreePool</span><span class="token punctuation">(</span>Apc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>PEPROCESS <span class="token function">FindProcessByNameFromIndex</span><span class="token punctuation">(</span>PWCH name<span class="token punctuation">,</span> <span class="token keyword">int</span> startPid<span class="token punctuation">)</span><span class="token punctuation">{</span>    PEPROCESS Process <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PEPROCESS findProcess <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startPid<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NTSTATUS status <span class="token operator">=</span> <span class="token function">PsLookupProcessByProcessId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        PUNICODE_STRING ProcessName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        status <span class="token operator">=</span> <span class="token function">SeLocateProcessImageName</span><span class="token punctuation">(</span>Process<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ProcessName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ProcessName<span class="token operator">-></span>Length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">_wcsupr</span><span class="token punctuation">(</span>ProcessName<span class="token operator">-></span>Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wcsstr</span><span class="token punctuation">(</span>ProcessName<span class="token operator">-></span>Buffer<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                findProcess <span class="token operator">=</span> Process<span class="token punctuation">;</span>                <span class="token function">ExFreePoolWithTag</span><span class="token punctuation">(</span>ProcessName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> findProcess<span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">DrivUnload</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING pReg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DbgBreakPoint();</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> DrivUnload<span class="token punctuation">;</span>    PKAPC pApc <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pApc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PKEVENT pEvent <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEVENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pEvent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pApc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEVENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG AllProcessId <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    NTSTATUS is <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PEPROCESS TargetProc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        TargetProc <span class="token operator">=</span> <span class="token function">FindProcessByNameFromIndex</span><span class="token punctuation">(</span>L<span class="token string">"APCTEST.EXE"</span><span class="token punctuation">,</span> AllProcessId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetProc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"PEPROCESS : %llx\r\n"</span><span class="token punctuation">,</span> TargetProc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ULONG_PTR TargetProcId <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>TargetProc <span class="token operator">+</span> <span class="token number">0x2e8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PLIST_ENTRY ThreadListEntry <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>ULONG_PTR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>TargetProc <span class="token operator">+</span> <span class="token number">0x488</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PLIST_ENTRY head <span class="token operator">=</span> ThreadListEntry<span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            PETHREAD Ethread <span class="token operator">=</span> <span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>ThreadListEntry <span class="token operator">-</span> <span class="token number">0x6b8</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token function">PsGetThreadProcessId</span><span class="token punctuation">(</span>Ethread<span class="token punctuation">)</span> <span class="token operator">==</span> TargetProcId<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Ethread Addr is %llx\r\n"</span><span class="token punctuation">,</span> Ethread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeInitializeEvent</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> SynchronizationEvent<span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> Ethread<span class="token punctuation">,</span> OriginalApcEnvironment<span class="token punctuation">,</span> kernelRoutineFunc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x401000</span><span class="token punctuation">,</span> UserMode<span class="token punctuation">,</span> <span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>Ethread <span class="token operator">+</span> <span class="token number">0x74</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>                is <span class="token operator">=</span> <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> pEvent<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeAlertThread</span><span class="token punctuation">(</span>Ethread<span class="token punctuation">,</span> UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ThreadListEntry <span class="token operator">=</span> ThreadListEntry<span class="token operator">-></span>Flink<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ThreadListEntry <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        AllProcessId <span class="token operator">=</span> TargetProcId <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pApc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] KeInsertQueueApc Success\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3环测试代码如下</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// APCtest.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>VOID <span class="token function">Test</span><span class="token punctuation">(</span>PVOID param1<span class="token punctuation">,</span> PVOID param2<span class="token punctuation">,</span> PVOID param3<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Apc Called\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,Test = 0x%x\r\n"</span><span class="token punctuation">,</span> <span class="token function">GetCurrentThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--------------------\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果：</p><p><img src="/2021/08/15/x64ApcInjection/image.png" alt="image.png"></p><p><img src="/2021/08/15/x64ApcInjection/image2.png" alt="image.png"></p><h3 id="注入64位用户APC"><a href="#注入64位用户APC" class="headerlink" title="注入64位用户APC"></a>注入64位用户APC</h3><p>0环代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> _KAPC_ENVIRONMENT <span class="token punctuation">{</span>    OriginalApcEnvironment<span class="token punctuation">,</span>    AttachedApcEnvironment<span class="token punctuation">,</span>    CurrentApcEnvironment<span class="token punctuation">,</span>    InsertApcEnvironment<span class="token punctuation">}</span> KAPC_ENVIRONMENT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKNORMAL_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN PVOID NormalContext<span class="token punctuation">,</span>    IN PVOID SystemArgument1<span class="token punctuation">,</span>    IN PVOID SystemArgument2    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKKERNEL_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc<span class="token punctuation">,</span>    IN OUT PKNORMAL_ROUTINE<span class="token operator">*</span> NormalRoutine<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> NormalContext<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument1<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument2    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKRUNDOWN_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc    <span class="token punctuation">)</span><span class="token punctuation">;</span>VOID <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>    __out PRKAPC Apc<span class="token punctuation">,</span>    __in PRKTHREAD Thread<span class="token punctuation">,</span>    __in KAPC_ENVIRONMENT Environment<span class="token punctuation">,</span>    __in PKKERNEL_ROUTINE KernelRoutine<span class="token punctuation">,</span>    __in_opt PKRUNDOWN_ROUTINE RundownRoutine<span class="token punctuation">,</span>    __in_opt PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">,</span>    __in_opt KPROCESSOR_MODE ApcMode<span class="token punctuation">,</span>    __in_opt PVOID NormalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOLEAN <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>    __inout PRKAPC Apc<span class="token punctuation">,</span>    __in_opt PVOID SystemArgument1<span class="token punctuation">,</span>    __in_opt PVOID SystemArgument2<span class="token punctuation">,</span>    __in KPRIORITY Increment<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOLEAN<span class="token function">KeAlertThread</span><span class="token punctuation">(</span>    __inout PKTHREAD Thread<span class="token punctuation">,</span>    __in KPROCESSOR_MODE AlertMode<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERN_C NTSTATUS <span class="token function">PsWrapApcWow64Thread</span><span class="token punctuation">(</span>PVOID<span class="token operator">*</span> ApcContext<span class="token punctuation">,</span> PVOID<span class="token operator">*</span> ApcRoutine<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERN_C HANDLE <span class="token function">PsGetThreadProcessId</span><span class="token punctuation">(</span>__in PETHREAD Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERN_C VOID <span class="token function">kernelRoutineFunc</span><span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc<span class="token punctuation">,</span>    IN OUT PKNORMAL_ROUTINE<span class="token operator">*</span> NormalRoutine<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> NormalContext<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument1<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:kernelRoutineFunc pid : %d\r\n"</span><span class="token punctuation">,</span> <span class="token function">PsGetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG64 addr <span class="token operator">=</span> <span class="token number">0x140001000</span><span class="token punctuation">;</span>    PULONG_PTR something <span class="token operator">=</span> <span class="token number">0x140063000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//PsWrapApcWow64Thread(NULL, &amp;addr);</span>    <span class="token comment" spellcheck="true">//DbgBreakPoint();</span>    <span class="token operator">*</span>something <span class="token operator">=</span> <span class="token operator">*</span>something <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">*</span>NormalRoutine <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token function">ExFreePool</span><span class="token punctuation">(</span>Apc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>PEPROCESS <span class="token function">FindProcessByNameFromIndex</span><span class="token punctuation">(</span>PWCH name<span class="token punctuation">,</span> <span class="token keyword">int</span> startPid<span class="token punctuation">)</span><span class="token punctuation">{</span>    PEPROCESS Process <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PEPROCESS findProcess <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startPid<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NTSTATUS status <span class="token operator">=</span> <span class="token function">PsLookupProcessByProcessId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        PUNICODE_STRING ProcessName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        status <span class="token operator">=</span> <span class="token function">SeLocateProcessImageName</span><span class="token punctuation">(</span>Process<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ProcessName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">NT_SUCCESS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ProcessName<span class="token operator">-></span>Length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">_wcsupr</span><span class="token punctuation">(</span>ProcessName<span class="token operator">-></span>Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wcsstr</span><span class="token punctuation">(</span>ProcessName<span class="token operator">-></span>Buffer<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                findProcess <span class="token operator">=</span> Process<span class="token punctuation">;</span>                <span class="token function">ExFreePoolWithTag</span><span class="token punctuation">(</span>ProcessName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">ObDereferenceObject</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> findProcess<span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">DrivUnload</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING pReg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DbgBreakPoint();</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> DrivUnload<span class="token punctuation">;</span>    PKAPC pApc <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pApc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PKEVENT pEvent <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEVENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pEvent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pApc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEVENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ULONG AllProcessId <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    NTSTATUS is <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PEPROCESS TargetProc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        TargetProc <span class="token operator">=</span> <span class="token function">FindProcessByNameFromIndex</span><span class="token punctuation">(</span>L<span class="token string">"APCTEST.EXE"</span><span class="token punctuation">,</span> AllProcessId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetProc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"PEPROCESS : %llx\r\n"</span><span class="token punctuation">,</span> TargetProc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ULONG_PTR TargetProcId <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>TargetProc <span class="token operator">+</span> <span class="token number">0x2e8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PLIST_ENTRY ThreadListEntry <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>ULONG_PTR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>TargetProc <span class="token operator">+</span> <span class="token number">0x488</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PLIST_ENTRY head <span class="token operator">=</span> ThreadListEntry<span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            PETHREAD Ethread <span class="token operator">=</span> <span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>ThreadListEntry <span class="token operator">-</span> <span class="token number">0x6b8</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token function">PsGetThreadProcessId</span><span class="token punctuation">(</span>Ethread<span class="token punctuation">)</span> <span class="token operator">==</span> TargetProcId<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Ethread Addr is %llx\r\n"</span><span class="token punctuation">,</span> Ethread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeInitializeEvent</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> SynchronizationEvent<span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> Ethread<span class="token punctuation">,</span> OriginalApcEnvironment<span class="token punctuation">,</span> kernelRoutineFunc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x140001000</span><span class="token punctuation">,</span> UserMode<span class="token punctuation">,</span> <span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PUCHAR<span class="token punctuation">)</span>Ethread <span class="token operator">+</span> <span class="token number">0x74</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>                is <span class="token operator">=</span> <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> pEvent<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeAlertThread</span><span class="token punctuation">(</span>Ethread<span class="token punctuation">,</span> UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ThreadListEntry <span class="token operator">=</span> ThreadListEntry<span class="token operator">-></span>Flink<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ThreadListEntry <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        AllProcessId <span class="token operator">=</span> TargetProcId <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pApc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+] KeInsertQueueApc Success\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3环测试代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// APCtest.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>ULONG_PTR something <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>VOID <span class="token function">Test</span><span class="token punctuation">(</span>PVOID param1<span class="token punctuation">,</span> PVOID param2<span class="token punctuation">,</span> PVOID param3<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Apc Called\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Test Addr = %llx\r\n"</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Addr = %llx,something = 0x%llx\r\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>something<span class="token punctuation">,</span> something<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--------------------\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>APC插入效果如图</p><p><img src="/2021/08/15/x64ApcInjection/image3.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;注入32位用户APC&quot;&gt;&lt;a href=&quot;#注入32位用户APC&quot; class=&quot;headerlink&quot; title=&quot;注入32位用户APC&quot;&gt;&lt;/a&gt;注入32位用户APC&lt;/h3&gt;&lt;p&gt;需要注意的是，64位下寻址32位的地址，需要做一次封装。&lt;/p&gt;
&lt;p&gt;可以</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Mono注入（二）</title>
    <link href="http://airshelf.github.io/2021/08/12/MonoInjectII/"/>
    <id>http://airshelf.github.io/2021/08/12/MonoInjectII/</id>
    <published>2021-08-12T05:36:15.000Z</published>
    <updated>2021-10-25T08:09:15.451Z</updated>
    
    <content type="html"><![CDATA[<p>这次在上次mono注入的基础上，增加了人物透视的简单功能</p><p>下图是这一次测试的游戏，Zero Hour</p><p><img src="/2021/08/12/MonoInjectII/image.png" alt="image.png"></p><p>通过dnspy，我们可以确定到AI类名为<code>ZH_AINav</code>，继而对该类的实例对象进行枚举绘制。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>CodeAnalysis<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">namespace</span> MonoInjectTemplate<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HackMain</span> <span class="token punctuation">:</span> MonoBehaviour    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            enemies <span class="token operator">=</span> <span class="token generic-method function">FindObjectsOfType<span class="token punctuation">&lt;</span>ZH_AINav<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _camera <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"hello little hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> enemy <span class="token keyword">in</span> enemies<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Basic_ESP</span><span class="token punctuation">(</span>enemy<span class="token punctuation">.</span>transform<span class="token punctuation">,</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> Vector3 <span class="token function">W2S</span><span class="token punctuation">(</span>Transform transform<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> _camera<span class="token punctuation">.</span><span class="token function">WorldToScreenPoint</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Basic_ESP</span><span class="token punctuation">(</span>Transform transform<span class="token punctuation">,</span> <span class="token keyword">string</span> text<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Vector3 screenVector3 <span class="token operator">=</span> <span class="token function">W2S</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>screenVector3<span class="token punctuation">.</span>z <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span>screenVector3<span class="token punctuation">.</span>x<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>height <span class="token operator">-</span> screenVector3<span class="token punctuation">.</span>y<span class="token punctuation">,</span> screenVector3<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">,</span>                        screenVector3<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> ZH_AINav<span class="token punctuation">[</span><span class="token punctuation">]</span> enemies<span class="token punctuation">;</span>        <span class="token keyword">private</span> Camera _camera<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单效果如下：</p><p><img src="/2021/08/12/MonoInjectII/image2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次在上次mono注入的基础上，增加了人物透视的简单功能&lt;/p&gt;
&lt;p&gt;下图是这一次测试的游戏，Zero Hour&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/12/MonoInjectII/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过</summary>
      
    
    
    
    
    <category term="游戏" scheme="http://airshelf.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>APC详细分析</title>
    <link href="http://airshelf.github.io/2021/08/11/APC-detail/"/>
    <id>http://airshelf.github.io/2021/08/11/APC-detail/</id>
    <published>2021-08-11T06:55:15.000Z</published>
    <updated>2021-10-25T08:14:00.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="APC概念"><a href="#APC概念" class="headerlink" title="APC概念"></a>APC概念</h3><p>APC分为两种类型：内核APC、用户APC</p><p>用户模式APC运行在用户模式下的目标线程的当前上下文中，且需要获得目标线程的许可。</p><p>用户模式APC需要在目标线程处于alertable的等待状态才能被成功调度执行。</p><p>通过调度下面的任一函数，都可以让线程进入这种等待状态。</p><p>内核函数：</p><pre class="line-numbers language-c"><code class="language-c">KeWaitForSingleObjectKeWaitForMultipleObjectsKeWaitForMutexObjectKeDelayExecutionThread<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用户函数：</p><pre class="line-numbers language-c"><code class="language-c">SleepExSignalObjectAndWaitWaitForSingleObjectEx WaitForMultipleObjectsExMsgWaitForMultipleObjectsEx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外,通过调用一个未公开的alert-test服务<code>KeTestAlertThread</code>，用户线程可以使用户模式APC执行。</p><h3 id="APC相关结构"><a href="#APC相关结构" class="headerlink" title="APC相关结构"></a>APC相关结构</h3><p>每一个线程都包含两个APC队列，一个为用户APC队列、一个为内核APC队列。这两个队列都存储在<code>_KAPC_STATE</code>结构体中。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _KAPC_STATE <span class="token punctuation">{</span>        LIST_ENTRY ApcListHead<span class="token punctuation">[</span>MaximumMode<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//线程的apc链表 只有两个 内核态和用户态</span>        <span class="token keyword">struct</span> _KPROCESS <span class="token operator">*</span>Process<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//当前线程的进程体   PsGetCurrentProcess()</span>        BOOLEAN KernelApcInProgress<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//内核APC正在执行</span>        BOOLEAN KernelApcPending<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//内核APC正在等待执行</span>        BOOLEAN UserApcPending<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//用户APC正在等待执行</span><span class="token punctuation">}</span> KAPC_STATE<span class="token punctuation">,</span> <span class="token operator">*</span>PKAPC_STATE<span class="token punctuation">,</span> <span class="token operator">*</span>PRKAPC_STATE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_KPAC_STATE</code>结构体又存储于<code>_KTHREAD</code>中</p><pre><code>ntdll!_KTHREAD   +0x000 Header           : _DISPATCHER_HEADER   +0x010 MutantListHead   : _LIST_ENTRY   +0x018 InitialStack     : Ptr32 Void   +0x01c StackLimit       : Ptr32 Void   +0x020 Teb              : Ptr32 Void   +0x024 TlsArray         : Ptr32 Void   +0x028 KernelStack      : Ptr32 Void   +0x02c DebugActive      : UChar   +0x02d State            : UChar   +0x02e Alerted          : [2] UChar   +0x030 Iopl             : UChar   +0x031 NpxState         : UChar   +0x032 Saturation       : Char   +0x033 Priority         : Char   +0x034 ApcState         : _KAPC_STATE          //这里保存_KAPC_STATE    +0x04c ContextSwitches : Uint4B   ...   +0x134 TrapFrame        : Ptr32 _KTRAP_FRAME   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE //　 +0x140 PreviousMode     : Char   +0x141 EnableStackSwap  : UChar   +0x142 LargeStack       : UChar   +0x143 ResourceIndex    : UChar   +0x144 KernelTime       : Uint4B   +0x148 UserTime         : Uint4B   +0x14c SavedApcState    : _KAPC_STATE          //这里保存_KAPC_STATE    +0x164 Alertable        : UChar   +0x165 ApcStateIndex    : UChar                //</code></pre><p>没有附加时，ApcState存储当前进程的APC队列<br>当A进程附加到B进程，SaveApcState保存原来A进程的Apc队列，ApcState保存被附加B进程的Apc队列。</p><p>在_KTHREAD中，</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> _KAPC_ENVIRONMENT <span class="token punctuation">{</span>　　OriginalApcEnvironment<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//原始的进程环境</span>　　AttachedApcEnvironment<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//挂靠后的进程环境</span>　　CurrentApcEnvironment<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前环境</span> 　 InsertApcEnvironment   <span class="token comment" spellcheck="true">//被插入时的环境</span><span class="token punctuation">}</span> KAPC_ENVIRONMENT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ApcStateIndex的值作为ApcStatePointer数组的索引来得到目标APC环境指针。</p><p>实际可用于ApcStateIndex的只有OriginalApcEnvironment(0)和AttachedApcEnvironment(1)</p><p>当ApcStateIndex为OriginalApcEnvironment时，Process指向当前的进程，</p><p>当为AttachedApcEnvironment时，ApcState指向挂靠的进程，SaveApcState指向的才是原来所属的进程</p><p>所以ApcState中的Process一直指向的是”当前进程”，PsGetCurrentProcess就是返回的ApcState中的Process, KeCurrentThread()-&gt;Process指向的是挂靠前的进程, 即”OriginalProcess”.</p><p>常态下ApcStatePointer[0]指向ApcState，而ApcStatePointer[1]指向SavedApcState，挂靠后相反。</p><p>APC结构体如下</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _KAPC <span class="token punctuation">{</span>    CSHORT Type<span class="token punctuation">;</span>    CSHORT Size<span class="token punctuation">;</span>    ULONG Spare0<span class="token punctuation">;</span>    <span class="token keyword">struct</span> _KTHREAD <span class="token operator">*</span>Thread<span class="token punctuation">;</span>    LIST_ENTRY ApcListEntry<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 插入线程APC链表</span>    PKKERNEL_ROUTINE KernelRoutine<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//内核模式中执行</span>    PKRUNDOWN_ROUTINE RundownRoutine<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 线程终止时还有APC没执行会调用这个函数</span>    PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个为0 表示是一个特殊内核APC，否则是一个普通的（又分为内核态的和用户态的）。特殊的位于链表前部，普通的位于后部。 普通的APC，normal和kernel例程都将被调用</span>    PVOID NormalContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// N.B. The following two members MUST be together.</span>    <span class="token comment" spellcheck="true">//</span>    PVOID SystemArgument1<span class="token punctuation">;</span>    PVOID SystemArgument2<span class="token punctuation">;</span>    CCHAR ApcStateIndex<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//APC环境状态</span>    KPROCESSOR_MODE ApcMode<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 内核态or用户态</span>    BOOLEAN Inserted<span class="token punctuation">;</span><span class="token punctuation">}</span> KAPC<span class="token punctuation">,</span> <span class="token operator">*</span>PKAPC<span class="token punctuation">,</span> <span class="token operator">*</span>RESTRICTED_POINTER PRKAPC<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="KeAttachProcess-KeDetachProcess"><a href="#KeAttachProcess-KeDetachProcess" class="headerlink" title="KeAttachProcess/KeDetachProcess"></a>KeAttachProcess/KeDetachProcess</h3><p>当一个线程调用KeAttachProcess时，在另外的进程上下文中执行后续的代码时，ApcState的内容就被拷贝到SavedApcState。然后ApcState被清空，它的APC队列重新初始化，控制变量设置为0，当前进程设置为新的进程。</p><p>这些步骤成功的确保先前在线程所属的进程上下文地址空间中等待的APC得以保留，在当线程运行在其它不同的进程上下文时，这些APCs不被执行。</p><p>随后，ApcStatePointer数组内容被更新来反映新的状态，数组中第一个元素指向SavedApcState，第二个元素指向ApcState，表明线程所属进程上下文的APC环境位于SavedApcState。线程的新的进程上下文的APC环境位于ApcState。</p><p>最后，当前进程上下文切换到新的进程上下文。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">KiMoveApcState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">,</span> SavedApcState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前的APC状态移到Save里，然后初始化apc状态</span><span class="token function">InitializeListHead</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>KernelMode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ApcState被初始化</span><span class="token function">InitializeListHead</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>UserMode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcInProgress <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcPending <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>UserApcPending <span class="token operator">=</span> FALSE<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>SavedApcState <span class="token operator">==</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>SavedApcState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread<span class="token operator">-></span>ApcStatePointer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>SavedApcState<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//第一个指向保存的apc状态 原始apc环境</span>    Thread<span class="token operator">-></span>ApcStatePointer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//第二个是当前的 挂靠apc环境</span>    Thread<span class="token operator">-></span>ApcStateIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">//表示现在的状态指向 指向挂靠状态</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当线程从新的进程中脱离时(KeDetachProcess), 任何在新的进程地址空间中等待执行的内核APC首先被派发执行。</p><p>随后SavedApcState的内容被拷贝回ApcState。SavedApcState 的内容被清空。</p><p>线程的ApcStateIndex域被设为OriginalApcEnvironment，ApcStatePointer域更新，当前进程上下文切换到线程所属进程。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcPending <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>Thread<span class="token operator">-></span>SpecialApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>LockHandle<span class="token punctuation">.</span>OldIrql <span class="token operator">&lt;</span> APC_LEVEL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">//</span>                        <span class="token comment" spellcheck="true">// Unlock the thread APC lock and lower IRQL to its previous</span>                        <span class="token comment" spellcheck="true">// value. An APC interrupt will immediately occur which will</span>                        <span class="token comment" spellcheck="true">// result in the delivery of the kernel APC if possible.</span>                        <span class="token comment" spellcheck="true">//释放这个锁将导致 请求APC级别的中断，这样apc将得到释放</span>                        <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">KeAcquireInStackQueuedSpinLockRaiseToSynch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcQueueLock<span class="token punctuation">,</span>                                    <span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//省略无关代码，到这里进行恢复</span><span class="token comment" spellcheck="true">//</span><span class="token function">KiMoveApcState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>SavedApcState<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//恢复了</span>Thread<span class="token operator">-></span>SavedApcState<span class="token punctuation">.</span>Process <span class="token operator">=</span> <span class="token punctuation">(</span>PKPROCESS<span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Thread<span class="token operator">-></span>ApcStatePointer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">;</span>Thread<span class="token operator">-></span>ApcStatePointer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>SavedApcState<span class="token punctuation">;</span>Thread<span class="token operator">-></span>ApcStateIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//ApcStatePointer这样设计是巧妙的</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内核插入APC过程"><a href="#内核插入APC过程" class="headerlink" title="内核插入APC过程"></a>内核插入APC过程</h3><h6 id="1、使用KeInitializeApc初始化apc结构体"><a href="#1、使用KeInitializeApc初始化apc结构体" class="headerlink" title="1、使用KeInitializeApc初始化apc结构体"></a>1、使用KeInitializeApc初始化apc结构体</h6><pre class="line-numbers language-c"><code class="language-c">NTKERNELAPI    VOID    <span class="token function">KeInitializeApc</span> <span class="token punctuation">(</span>    IN PRKAPC Apc<span class="token punctuation">,</span>                                  <span class="token comment" spellcheck="true">//APC对象</span>    IN PKTHREAD Thread<span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true">//目标线程对象指针</span>    IN KAPC_ENVIRONMENT Environment<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//APC环境索引（指出APC对象存放于哪个APC环境）</span>    IN PKKERNEL_ROUTINE KernelRoutine<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//Kernel 例程指针</span>    IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//rundown例程指针</span>    IN PKNORMAL_ROUTINE NormalRoutine OPTIONAL<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//normal 例程指针</span>    IN KPROCESSOR_MODE ApcMode<span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">//APC类型 （内核或用户模式）</span>    IN PVOID Context                                <span class="token comment" spellcheck="true">//真正我们实现的函数</span>    <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">RtlZeroMemory</span><span class="token punctuation">(</span>Apc<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Apc<span class="token operator">-></span>Type <span class="token operator">=</span> ApcObject<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// APC是类型为ApcObejct的内核对象</span>    Apc<span class="token operator">-></span>Size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Environment <span class="token operator">==</span> CurrentApcEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当前环境，那Index就是线程的</span>        Apc<span class="token operator">-></span>ApcStateIndex <span class="token operator">=</span> Thread<span class="token operator">-></span>ApcStateIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Environment <span class="token operator">&lt;=</span> Thread<span class="token operator">-></span>ApcStateIndex<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Environment <span class="token operator">==</span> InsertApcEnvironment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apc<span class="token operator">-></span>ApcStateIndex <span class="token operator">=</span> <span class="token punctuation">(</span>CCHAR<span class="token punctuation">)</span>Environment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Apc<span class="token operator">-></span>Thread <span class="token operator">=</span> Thread<span class="token punctuation">;</span>    Apc<span class="token operator">-></span>KernelRoutine <span class="token operator">=</span> KernelRoutine<span class="token punctuation">;</span>    Apc<span class="token operator">-></span>RundownRoutine <span class="token operator">=</span> RundownRoutine<span class="token punctuation">;</span>    Apc<span class="token operator">-></span>NormalRoutine <span class="token operator">=</span> NormalRoutine<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*Check if this a special APC*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>NormalRoutine<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//NormalRoutine非空,是需要在用户空间执行的APC函数</span>        <span class="token comment" spellcheck="true">/*it's a normal one. Set the context and mode */</span>        Apc<span class="token operator">-></span>ApcMode <span class="token operator">=</span> Mode<span class="token punctuation">;</span>        Apc<span class="token operator">-></span>NormalContext <span class="token operator">=</span> Context<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//我们真正认为的APC执行函数</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有需要在用户空间执行的NormalRoutine</span>        <span class="token comment" spellcheck="true">/*it's a special APC,which can only be kernel mode*/</span>        Apc<span class="token operator">-></span>ApcMode <span class="token operator">=</span> KernelMode<span class="token punctuation">;</span>        Apc<span class="token operator">-></span>NormalContext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        Apc<span class="token operator">-></span>Inserted <span class="token operator">=</span> FALSE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>KeInitializeApc首先设置APC对象的Type和Size域一个适当的值，然后检查参数Environment的值。</p><p>如果是CurrentApcEnvironment，那么ApcStateIndex设置为目标线程的ApcStateIndex。</p><p>否则，ApcStateIndex域设置为参数Environment的值。</p><p>随后，函数直接用参数设置APC对象Thread，RundownRoutine，KernelRoutine域的值。</p><p>为了正确地确定APC的类型，KeInitializeApc检查参数NORMAL_ROUTINE的值，</p><p>如果是NULL，ApcMode域的值设置为KernelMode，NormalContext域设置为NULL。</p><p>如果NORMAL_ROUTINE的值不是NULL，这时候它一定指向一个有效的例程，就用相应的参数来设置ApcMode域和NormalContext域。</p><p>最后，KeInitializeApc 设置Inserted域为FALSE。</p><p>然而初始化APC对象，并没有把它存放到相应的APC队列中。</p><p>从代码可以看出，APC对象如果缺少有效的NORMAL_ROUTINE，就会被当作内核模式APC。尤其是它们会被认为是特殊的内核模式APC.</p><p>任意类型的APC都可以定义一个有效的RundownRoutine，这个例程必须在内核内存区域，并且仅仅当系统需要释放APC队列的内容时，才被调用。</p><p>例如线程退出时，在这种情况下，KernelRoutine和NormalRoutine都不执行，只有RundownRoutine执行。没有这个例程的APC对象会被删除。</p><h6 id="2、使用KeInsertQueueApc函数将apc对象插入apc队列"><a href="#2、使用KeInsertQueueApc函数将apc对象插入apc队列" class="headerlink" title="2、使用KeInsertQueueApc函数将apc对象插入apc队列"></a>2、使用KeInsertQueueApc函数将apc对象插入apc队列</h6><p>APC对象完成初始化后，设备驱动调用KeInsertQueueApc来将APC对象存放到目标线程的相应的APC队列中。</p><p>这个函数接受一个由KeInitializeApc完成初始化的APC对象指针，两个系统参数和一个优先级增量。</p><p>跟传递给KeInitializeApc函数的参数context一样，这两个系统参数只是在APC的例程执行时，简单的传递给APC的例程。</p><pre class="line-numbers language-c"><code class="language-c">BOOLEAN <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>    PRKAPC Apc<span class="token punctuation">,</span>    PVOID SystemArgument1<span class="token punctuation">,</span>    PVOID SystemArgument2<span class="token punctuation">,</span>    KPRIORITY Increment    <span class="token punctuation">)</span><span class="token punctuation">{</span>    PKTHREAD Thread <span class="token operator">=</span> Apc<span class="token operator">-></span>Thread<span class="token punctuation">;</span>           <span class="token function">KeAcquireInStackQueuedSpinLockRaiseToSynch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcQueueLock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//升到synch_level获取apc锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>ApcQueueable <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token comment" spellcheck="true">//线程退出时不接受APC</span>        <span class="token punctuation">(</span>Apc<span class="token operator">-></span>Inserted <span class="token operator">==</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Inserted <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Apc<span class="token operator">-></span>Inserted <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>        Apc<span class="token operator">-></span>SystemArgument1 <span class="token operator">=</span> SystemArgument1<span class="token punctuation">;</span>        Apc<span class="token operator">-></span>SystemArgument2 <span class="token operator">=</span> SystemArgument2<span class="token punctuation">;</span>        <span class="token function">KiInsertQueueApc</span><span class="token punctuation">(</span>Apc<span class="token punctuation">,</span> Increment<span class="token punctuation">)</span><span class="token punctuation">;</span>        Inserted <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// Unlock the thread APC queue lock, exit the scheduler, and return</span>    <span class="token comment" spellcheck="true">// whether the APC was inserted.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token function">KeReleaseInStackQueuedSpinLockFromDpcLevel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KiExitDispatcher</span><span class="token punctuation">(</span>LockHandle<span class="token punctuation">.</span>OldIrql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>BOOLEAN <span class="token function">KiInsertQueueApc</span><span class="token punctuation">(</span>  IN  PKAPC Apc<span class="token punctuation">,</span>  IN  KPRIORITY Increment<span class="token punctuation">)</span><span class="token punctuation">{</span>        Thread <span class="token operator">=</span> Apc<span class="token operator">-></span>Thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Apc<span class="token operator">-></span>ApcStateIndex <span class="token operator">==</span> InsertApcEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//被插入线程的环境，这里面赋值</span>            Apc<span class="token operator">-></span>ApcStateIndex <span class="token operator">=</span> Thread<span class="token operator">-></span>ApcStateIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ApcState <span class="token operator">=</span> Thread<span class="token operator">-></span>ApcStatePointer<span class="token punctuation">[</span>Apc<span class="token operator">-></span>ApcStateIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        ApcMode <span class="token operator">=</span> Apc<span class="token operator">-></span>ApcMode<span class="token punctuation">;</span>        <span class="token function">ASSERT</span> <span class="token punctuation">(</span>Apc<span class="token operator">-></span>Inserted <span class="token operator">==</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Apc<span class="token operator">-></span>NormalRoutine <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ApcMode <span class="token operator">!=</span> KernelMode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Apc<span class="token operator">-></span>KernelRoutine <span class="token operator">==</span> PsExitSpecialApc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//用户模式</span>                Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>UserApcPending <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                <span class="token function">InsertHeadList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ApcState<span class="token operator">-></span>ApcListHead<span class="token punctuation">[</span>ApcMode<span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token operator">&amp;</span>Apc<span class="token operator">-></span>ApcListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通内核模式 插入尾部</span>                <span class="token function">InsertTailList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ApcState<span class="token operator">-></span>ApcListHead<span class="token punctuation">[</span>ApcMode<span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token operator">&amp;</span>Apc<span class="token operator">-></span>ApcListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//特殊内核模式 找到最后一个特殊APC 插入 始终保持特殊APC在普通的前面，又要保证插入是按照时间顺序的。</span>            ListEntry <span class="token operator">=</span> ApcState<span class="token operator">-></span>ApcListHead<span class="token punctuation">[</span>ApcMode<span class="token punctuation">]</span><span class="token punctuation">.</span>Blink<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>ListEntry <span class="token operator">!=</span> <span class="token operator">&amp;</span>ApcState<span class="token operator">-></span>ApcListHead<span class="token punctuation">[</span>ApcMode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ApcEntry <span class="token operator">=</span> <span class="token function">CONTAINING_RECORD</span><span class="token punctuation">(</span>ListEntry<span class="token punctuation">,</span> KAPC<span class="token punctuation">,</span> ApcListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ApcEntry<span class="token operator">-></span>NormalRoutine <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ListEntry <span class="token operator">=</span> ListEntry<span class="token operator">-></span>Blink<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">InsertHeadList</span><span class="token punctuation">(</span>ListEntry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Apc<span class="token operator">-></span>ApcListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Apc<span class="token operator">-></span>ApcStateIndex <span class="token operator">==</span> Thread<span class="token operator">-></span>ApcStateIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//是线程有的状态环境 0 or 1 原始或者挂靠的环境，另外两种状态已经在之前解决掉了 现在只有这两种。并且当现在状态相同，可以尝试让apc立即执行起来</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// If the target thread is the current thread, then the thread state</span>            <span class="token comment" spellcheck="true">// is running and cannot change.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread <span class="token operator">==</span> <span class="token function">KeGetCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//插入的就是当前线程</span>                <span class="token function">ASSERT</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>State <span class="token operator">==</span> Running<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token comment" spellcheck="true">// If the APC mode is kernel, then set kernel APC pending and</span>                <span class="token comment" spellcheck="true">// request an APC interrupt if special APC's are not disabled.</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ApcMode <span class="token operator">==</span> KernelMode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内核态apc 直接请求apc中断</span>                    Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcPending <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token operator">-></span>SpecialApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">KiRequestSoftwareInterrupt</span><span class="token punctuation">(</span>APC_LEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            RequestInterrupt <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token function">KiLockDispatcherDatabaseAtSynchLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ApcMode <span class="token operator">==</span> KernelMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcPending <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                <span class="token function">KeMemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ThreadState <span class="token operator">=</span> Thread<span class="token operator">-></span>State<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ThreadState <span class="token operator">==</span> Running<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//线程正在运行 请求中断</span>                    RequestInterrupt <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ThreadState <span class="token operator">==</span> Waiting<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//线程处于等待状态，唤醒这个线程 在KiUnwaitThread调用 KiReadyThread 这里面会交付APC</span>                    <span class="token punctuation">(</span>Thread<span class="token operator">-></span>WaitIrql <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>Thread<span class="token operator">-></span>SpecialApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Apc<span class="token operator">-></span>NormalRoutine <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>KernelApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcInProgress <span class="token operator">==</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">KiUnwaitThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">,</span> STATUS_KERNEL_APC<span class="token punctuation">,</span> Increment<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token operator">-></span>State <span class="token operator">==</span> GateWait<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//门等待 从门等待中拆出来 直接插入备用链表</span>                    <span class="token function">KiAcquireThreadLock</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>State <span class="token operator">==</span> GateWait<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span>Thread<span class="token operator">-></span>WaitIrql <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span>Thread<span class="token operator">-></span>SpecialApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>Apc<span class="token operator">-></span>NormalRoutine <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>KernelApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcInProgress <span class="token operator">==</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            GateObject <span class="token operator">=</span> Thread<span class="token operator">-></span>GateObject<span class="token punctuation">;</span>                            <span class="token function">KiAcquireKobjectLock</span><span class="token punctuation">(</span>GateObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">RemoveEntryList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>WaitBlock<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>WaitListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">KiReleaseKobjectLock</span><span class="token punctuation">(</span>GateObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Queue <span class="token operator">=</span> Thread<span class="token operator">-></span>Queue<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                Queue<span class="token operator">-></span>CurrentCount <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            Thread<span class="token operator">-></span>WaitStatus <span class="token operator">=</span> STATUS_KERNEL_APC<span class="token punctuation">;</span>                            <span class="token function">KiInsertDeferredReadyList</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">KiReleaseThreadLock</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>State <span class="token operator">==</span> Waiting<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>Thread<span class="token operator">-></span>WaitMode <span class="token operator">==</span> UserMode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>Thread<span class="token operator">-></span>Alertable <span class="token operator">||</span> Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>UserApcPending<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//用户模式 正在等待 并且可以唤醒 调用 KiUnwaitThread</span>                    Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>UserApcPending <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                    <span class="token function">KiUnwaitThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">,</span> STATUS_USER_APC<span class="token punctuation">,</span> Increment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//其他的情况只能等待其他机会执行APC了</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// Unlock the dispatcher database and request an APC interrupt if</span>            <span class="token comment" spellcheck="true">// required.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">//如果有请求中断 这里执行一个</span>            <span class="token function">KiUnlockDispatcherDatabaseFromSynchLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>RequestInterrupt <span class="token operator">==</span> TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">KiRequestApcInterrupt</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>NextProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在KeInsertQueueApc中，将APC对象存放到目标线程相应的APC队列之前，它首先检查目标线程是否是APC queueable。</p><p>如果不是，函数立即返回FALSE。</p><p>如果是，函数直接用参数设置SystemArgument1和SystemArgument2，</p><p>随后，函数调用KiInsertQueueApc来将APC对象存放到相应的APC队列。</p><p>KiInsertQueueApc中接受一个APC对象和一个优先级增量。</p><p>这个函数首先得到线程APC队列并且持有它，防止其他线程修改当前线程的APC结构。</p><p>随后，检查APC对象的Inserted。</p><p>如果是TRUE，表明这个APC对象已经存放到APC队列中了，函数立即返回FALSE。</p><p>如果是FALSE，函数通过ApcStateIndex来确定目标APC环境，然后把APC对象存放到相应的APC队列中，即将APC对象中的ApcListEntry链入到APC环境的ApcListHead中。</p><p>链入的位置由APC的类型决定。常规的内核模式APC，用户模式APC都是存放到相应的APC队列的末端。</p><p>相反的，如果队列中已经存放了一些APC对象，特殊的内核模式APC存放到队列中第一个常规内核模式APC对象的前面。</p><p>如果是内核定义的一个当线程退出时使用的用户APC，它也会被放在相应的队列的前面。</p><p>然后，线程的主APC环境中的UserApcPending被设置为TRUE。</p><p>这时KiInsertQueueApc设置APC对象的Inserted为TRUE，表明这个APC对象已经存放到APC队列中了。</p><p>接下来，检查这个APC对象是否被排队到线程的当前进程上下文APC环境中，</p><p>如果不是，函数立即返回TRUE。</p><p>如果这是一个内核模式APC，线程主APC环境中的KernelApcPending域设置为TRUE。</p><h6 id="3、APC的执行过程分析"><a href="#3、APC的执行过程分析" class="headerlink" title="3、APC的执行过程分析"></a>3、APC的执行过程分析</h6><p>APC的执行过程分为内核执行过程和用户执行过程两部分</p><pre class="line-numbers language-c"><code class="language-c">VOID <span class="token function">KiDeliverApc</span> <span class="token punctuation">(</span> IN KPROCESSOR_MODE PreviousMode<span class="token punctuation">,</span> IN PKEXCEPTION_FRAME ExceptionFrame<span class="token punctuation">,</span> IN PKTRAP_FRAME TrapFrame<span class="token punctuation">)</span><span class="token punctuation">{</span>    PKTHREAD Thread <span class="token operator">=</span> <span class="token function">KeGetCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PKPROCESS Process <span class="token operator">=</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>Process<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">ASSERT_IRQL_EQUAL</span><span class="token punctuation">(</span>APC_LEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更换陷阱帧</span>    OldTrapFrame <span class="token operator">=</span> Thread<span class="token operator">-></span>TrapFrame<span class="token punctuation">;</span>    Thread<span class="token operator">-></span>TrapFrame <span class="token operator">=</span> TrapFrame<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Clear Kernel APC Pending</span>    Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcPending <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Check if Special APCs are disabled</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token operator">-></span>SpecialApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先处理内核模式APC队列中的每一项</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsListEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>KernelMode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//只处理当前线程当前状态环境下的dpc</span>    <span class="token function">KeAcquireInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcQueueLock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    NextEntry <span class="token operator">=</span> Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>KernelMode<span class="token punctuation">]</span><span class="token punctuation">.</span>Flink<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Check if the list became empty now</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>NextEntry <span class="token operator">==</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>KernelMode<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//到这已经空了释放并退出</span>        <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// Clear kernel APC pending, get the address of the APC object,</span>    <span class="token comment" spellcheck="true">// and determine the type of APC.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// N.B. Kernel APC pending must be cleared each time the kernel</span>    <span class="token comment" spellcheck="true">// APC queue is found to be non-empty.</span>    <span class="token comment" spellcheck="true">//</span>    Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcPending <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>     Apc <span class="token operator">=</span> <span class="token function">CONTAINING_RECORD</span><span class="token punctuation">(</span>NextEntry<span class="token punctuation">,</span> KAPC<span class="token punctuation">,</span> ApcListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReadForWriteAccess</span><span class="token punctuation">(</span>Apc<span class="token punctuation">)</span><span class="token punctuation">;</span>    KernelRoutine <span class="token operator">=</span> Apc<span class="token operator">-></span>KernelRoutine<span class="token punctuation">;</span>    NormalRoutine <span class="token operator">=</span> Apc<span class="token operator">-></span>NormalRoutine<span class="token punctuation">;</span>    NormalContext <span class="token operator">=</span> Apc<span class="token operator">-></span>NormalContext<span class="token punctuation">;</span>    SystemArgument1 <span class="token operator">=</span> Apc<span class="token operator">-></span>SystemArgument1<span class="token punctuation">;</span>    SystemArgument2 <span class="token operator">=</span> Apc<span class="token operator">-></span>SystemArgument2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>NormalRoutine <span class="token operator">==</span> <span class="token punctuation">(</span>PKNORMAL_ROUTINE<span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有NormalRoutine  特殊APC</span>        <span class="token function">RemoveEntryList</span><span class="token punctuation">(</span>NextEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        Apc<span class="token operator">-></span>Inserted <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>        <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用APC</span>        <span class="token punctuation">(</span>KernelRoutine<span class="token punctuation">)</span><span class="token punctuation">(</span>Apc<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>NormalRoutine<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>NormalContext<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>SystemArgument1<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//普通的内核apc</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcInProgress <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>Thread<span class="token operator">-></span>KernelApcDisable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RemoveEntryList</span><span class="token punctuation">(</span>NextEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>            Apc<span class="token operator">-></span>Inserted <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span>KernelRoutine<span class="token punctuation">)</span><span class="token punctuation">(</span>Apc<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//普通的apc 比如nt!KiSuspendThread</span>            <span class="token operator">&amp;</span>NormalRoutine<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//NormalRoutine可能会在这里被改成0，如果没改成0继续执行</span>            <span class="token operator">&amp;</span>NormalContext<span class="token punctuation">,</span>            <span class="token operator">&amp;</span>SystemArgument1<span class="token punctuation">,</span>            <span class="token operator">&amp;</span>SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//还要调用Normal</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>NormalRoutine <span class="token operator">!=</span> <span class="token punctuation">(</span>PKNORMAL_ROUTINE<span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//比如这可能是是nt!KiSuspendNop 啥也不干直接返回</span>                Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcInProgress <span class="token operator">=</span> TRUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这个apc执行的时候 其他的普通apc不会被交付</span>                <span class="token function">KeLowerIrql</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里normal和kernel的irql也不一样，normal在passive运行</span>                <span class="token punctuation">(</span>NormalRoutine<span class="token punctuation">)</span><span class="token punctuation">(</span>NormalContext<span class="token punctuation">,</span>                SystemArgument1<span class="token punctuation">,</span>                SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">KeRaiseIrql</span><span class="token punctuation">(</span>APC_LEVEL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>LockHandle<span class="token punctuation">.</span>OldIrql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>KernelApcInProgress <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">goto</span> CheckProcess<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在内核APC模式下，PreviousMode表示需要投递的哪一种APC，可以是KernelMode，也可以是UserMode。</p><p>如果是UserMode表示先执行内核模式队列中的APC请求，再执行内核模式队列中的APC请求。</p><p>如果是KernelMode，表示只执行内核模式队列中的APC请求。</p><p>此外，不管是内核模式还是用户模式，APC请求中一定有KernelRoutine，而NormalRoutine则可能有也可能没有。</p><p>KTHREAD中有两个KAPC_STATE数据结构，一个是ApcState，另一个是SavedApcState。</p><p>两者都有APC队列，但是要分派的是ApcState中的队列。</p><p>内核模式队列中执行APC是一次执行该队列中的所有APC请求，</p><p>而用户模式队列中执行用户APC却只执行其中的第一项APC请求。</p><p>所以首先通过一个while循环检查内核模式APC队列。</p><p>如果NormalRoutine为NULL，这是一种特殊情况，执行KernelRoutine所指的内核函数。</p><p>如果NormalRoutine非空，那么首先调用的是KernelRoutine，而指针NormalRoutine的地址作为参数传递下去，KernelRoutine的执行可能改变这个指针的值。</p><p>如果执行KernelRoutine之后NormalRoutine仍然非空，那么调用这个函数，虽然在内核执行，但是在PASSIVE_LEVEL级别上运行的，而不是APC_LEVEL级别。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PreviousMode <span class="token operator">==</span> UserMode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token function">IsListEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>UserMode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>UserApcPending <span class="token operator">!=</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">KeAcquireInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcQueueLock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>UserApcPending <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>        NextEntry <span class="token operator">=</span> Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>UserMode<span class="token punctuation">]</span><span class="token punctuation">.</span>Flink<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>NextEntry <span class="token operator">==</span> <span class="token operator">&amp;</span>Thread<span class="token operator">-></span>ApcState<span class="token punctuation">.</span>ApcListHead<span class="token punctuation">[</span>UserMode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> CheckProcess<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获得APC对象</span>        Apc <span class="token operator">=</span> <span class="token function">CONTAINING_RECORD</span><span class="token punctuation">(</span>NextEntry<span class="token punctuation">,</span> KAPC<span class="token punctuation">,</span> ApcListEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ReadForWriteAccess</span><span class="token punctuation">(</span>Apc<span class="token punctuation">)</span><span class="token punctuation">;</span>        KernelRoutine <span class="token operator">=</span> Apc<span class="token operator">-></span>KernelRoutine<span class="token punctuation">;</span>        NormalRoutine <span class="token operator">=</span> Apc<span class="token operator">-></span>NormalRoutine<span class="token punctuation">;</span>        NormalContext <span class="token operator">=</span> Apc<span class="token operator">-></span>NormalContext<span class="token punctuation">;</span>        SystemArgument1 <span class="token operator">=</span> Apc<span class="token operator">-></span>SystemArgument1<span class="token punctuation">;</span>        SystemArgument2 <span class="token operator">=</span> Apc<span class="token operator">-></span>SystemArgument2<span class="token punctuation">;</span>        <span class="token function">RemoveEntryList</span><span class="token punctuation">(</span>NextEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从队列中摘下APC请求 </span>        Apc<span class="token operator">-></span>Inserted <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>        <span class="token function">KeReleaseInStackQueuedSpinLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LockHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Call the kernelroutine</span>        <span class="token punctuation">(</span>KernelRoutine<span class="token punctuation">)</span><span class="token punctuation">(</span>Apc<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//用户态时这里很常见的是nt!IopDeallocateApc</span>                        <span class="token operator">&amp;</span>NormalRoutine<span class="token punctuation">,</span>                        <span class="token operator">&amp;</span>NormalContext<span class="token punctuation">,</span>                        <span class="token operator">&amp;</span>SystemArgument1<span class="token punctuation">,</span>                        <span class="token operator">&amp;</span>SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>NormalRoutine <span class="token operator">==</span> <span class="token punctuation">(</span>PKNORMAL_ROUTINE<span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Check if more User APCs are pending</span>            <span class="token function">KeTestAlertThread</span><span class="token punctuation">(</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//NormalRoutine 非空，为在用户空间执行APC函数做准备</span>            <span class="token comment" spellcheck="true">//Set up the Trap Frame and prepare for Execution in NTDLL.DLL</span>            <span class="token function">KiInitializeUserApc</span><span class="token punctuation">(</span>ExceptionFrame<span class="token punctuation">,</span>                                TrapFrame<span class="token punctuation">,</span>                                NormalRoutine<span class="token punctuation">,</span>                                NormalContext<span class="token punctuation">,</span>                                SystemArgument1<span class="token punctuation">,</span>                                SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内核APC的执行时无条件的，只要队列非空就要执行，而用户APC是有条件的。</p><p>第一:用户APC队列非空，<br>第二:调用参数DeliveryMode必须是UserMode，也就是即将返回到用户空间，并且ApcState中的UserApcPending为TRUE，表示队列中的请求却是是要求执行的。</p><p>与内核APC队列相比，用户APC这次进入KiDeliverApc()只处理用户APC队列中的第一个请求。</p><p>先执行KernelRoutine。如果执行完之后，NormalRoutine为NULL，那么执行KeTestAlertThread()，检测是否还有用户APC请求。</p><p>如果执行完之后，NormalRoutine不为NULL，那么执行KiInitializeUserApc()，而不是直接调用NormalRoutine，因为用户模式的NormalRoutine是在用户空间，要等cpu回到用户模式时才执行。</p><p>所以要做一些准备，KiInitializeUserApc()的实参ExceptionFrame和TrapFrame都是从KiServiceExit()传下来的。</p><pre class="line-numbers language-c"><code class="language-c">VOID NTAPI    <span class="token function">KiInitializeUserApc</span><span class="token punctuation">(</span>IN PKEXCEPTION_FRAME ExceptionFrame<span class="token punctuation">,</span>                        IN PKTRAP_FRAME TrapFrame<span class="token punctuation">,</span>IN PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">,</span>                        IN PVOID NormalContext<span class="token punctuation">,</span>IN PVOID SystemArgument1<span class="token punctuation">,</span>IN PVOID SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">{</span>    CONTEXT Context<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//Don't deliver APCs in V86 mode</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>TrapFrame<span class="token operator">-></span>EFlags<span class="token operator">&amp;</span>EFLAFGS_V86_MASK<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//save the full context 将系统空间堆栈上的自陷框架转换成CONTEXT结构</span>    Context<span class="token punctuation">.</span>ContextFlags <span class="token operator">=</span> CONTEXT_FULL <span class="token operator">|</span> CONTEXT_DEBUG_REGISTERS<span class="token punctuation">;</span>    <span class="token function">KeTrapFrameToContext</span><span class="token punctuation">(</span>TrapFrame<span class="token punctuation">,</span>ExceptionFrame<span class="token punctuation">,</span><span class="token operator">&amp;</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Protect with SEH 对用户空间堆栈的操作可能引起异常  ， 如地址错误</span>    _SEH_TRY    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Sanity check</span>        <span class="token function">ASSERT</span><span class="token punctuation">(</span>TrapFrame<span class="token operator">-></span>SegCs <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token operator">!=</span> KernelMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Get the aligned size</span>        AlignedEsp <span class="token operator">=</span> Context<span class="token punctuation">.</span>Esp <span class="token operator">&amp;</span><span class="token operator">~</span> <span class="token number">3</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保证边界对齐</span>        ContextLength <span class="token operator">=</span> CONTEXT_ALIGNED_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AlignedEsp <span class="token operator">-</span><span class="token number">8</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">~</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span> ContextLength<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调整用户空间堆栈指针</span>        <span class="token comment" spellcheck="true">//Probe the stack</span>        <span class="token function">ProbeForWrite</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span>Stack<span class="token punctuation">,</span>AlignedEsp<span class="token operator">-</span>Stack<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>Stack<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Copy data into it 将Context构复制到用户空间堆栈</span>        <span class="token function">RtlCooyMemory</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span><span class="token punctuation">(</span>Stack <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>CONTEXT<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CONTEXT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改系统空间上的自陷框架</span>        TrapFrame<span class="token operator">-></span>Eip <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span>KeUserApcDispatcher<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用户空间的EIP</span>        TrapFrame<span class="token operator">-></span>HardwareEsp <span class="token operator">=</span> Stack <span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//用户空间堆栈位置已有变化</span>        <span class="token comment" spellcheck="true">//Set R3 State</span>        TrapFrame<span class="token operator">-></span>SegCs <span class="token operator">=</span> <span class="token function">Ke386SanitizeSeg</span><span class="token punctuation">(</span>KGDT_R3_CODE<span class="token punctuation">,</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrapFrame<span class="token operator">-></span>HardwareSegSs <span class="token operator">=</span> <span class="token function">Ke386SanitizeSeg</span><span class="token punctuation">(</span>KGDT_R3_DATA<span class="token punctuation">,</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrapFrame<span class="token operator">-></span>SegDs <span class="token operator">=</span> <span class="token function">Ke386SanitizeSeg</span><span class="token punctuation">(</span>KGDT_R3_DATA<span class="token punctuation">,</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrapFrame<span class="token operator">-></span>SegEs <span class="token operator">=</span> <span class="token function">Ke386SanitizeSeg</span><span class="token punctuation">(</span>KGDT_R3_DATA<span class="token punctuation">,</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrapFrame<span class="token operator">-></span>Fs <span class="token operator">=</span> <span class="token function">Ke386SanitizeSeg</span><span class="token punctuation">(</span>KGDT_R3_TEB<span class="token punctuation">,</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrapFrame<span class="token operator">-></span>SegGs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Sanitize EFLAGS</span>        TrapFrame<span class="token operator">-></span>EFlags <span class="token operator">=</span> <span class="token function">Ke386SanitizeFlags</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>EFlags<span class="token punctuation">,</span>UserMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//check if thread has IOPL and force it enabled if so</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">KeGetCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Iopl<span class="token punctuation">)</span>            TrapFrame<span class="token operator">-></span>EFlags<span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x3000</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改用户空间堆栈</span>        <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>Stack <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>NormalRoutine<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>Stack <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>NormalContext<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>Stack <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>SystemArgument1<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>PULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>Stack <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>SystemArgument2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_SEH_EXCEP</span><span class="token punctuation">(</span>KiCopyInformation2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果在上面受保护的操作中发生异常</span>        <span class="token function">_SEH_VAR</span><span class="token punctuation">(</span>SehExcepRecord<span class="token punctuation">)</span><span class="token punctuation">.</span>ExceptionAddress <span class="token operator">=</span> <span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span>TrapFrame<span class="token operator">-></span>Eip<span class="token punctuation">;</span>        <span class="token function">KiDispatchException</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SehExceptRecord<span class="token punctuation">,</span>ExceptionFrame<span class="token punctuation">,</span>TrapFrame<span class="token punctuation">,</span>UserMode<span class="token punctuation">,</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(1) 首先CPU进入内核，在内核的堆栈上就会有一个框架（_KTRAP_FRAME)，用来保存用户空间的现场，因进入内核的原因不同，这个框架可以被称为自陷框架、中断框架、异常框架，不管什么框架，其内容格式是一样的，CPU在返回用户空间时将用到这个框架内容，保证CPU能正确的返回原先的断点。</p><p>(2)既然要让CPU返回用户空间时先执行我们的apc函数，就要修改这个框架内容，还要在执行完成之后回到之前的断点，所以这里首先将框架原来的内容保存起来，等执行完成之后在重入内核时恢复。但是保存在哪里呢？保存在当前线程的用户空间堆栈上是最合理的，需要把框架上内容复制到一个数据结构上，数据结构在保存在用户空间堆栈上，这个数据结构就是CONTEXT结构。</p><p>(3)CPU在执行完成APC函数之后，需要执行一个系统调用NtContinue()，并将指向用户空间堆栈上的CONTEXT结构作为参数，这样就可以还原到原先的断点。</p><p>这个函数代码分成三部分:</p><p>第一部分通过KeTrapFrameToContext()将此时的自陷框架内容复制在Context中，</p><p>第二部分将Context复制到用户空间堆栈上，在加上四个32位整数的位置，分别是NormalRoutine、NormalContext、SystemArgument1和SystemArgument2。</p><p>第三部分修改当前自陷框架的内容，将EIP指向用户空间的KiUserApcDispatcher()，修改ESP。</p><p>KiUserApcDispatcher是由ntdll.dll提供的函数，负责调用NormalRoutine和NtContinue函数。</p><p>在NormalRoutine函数中调用我们的NormalContext(我们真正认为的APC函数)函数</p><p>到这里，差不多就完成了整个分析。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;APC概念&quot;&gt;&lt;a href=&quot;#APC概念&quot; class=&quot;headerlink&quot; title=&quot;APC概念&quot;&gt;&lt;/a&gt;APC概念&lt;/h3&gt;&lt;p&gt;APC分为两种类型：内核APC、用户APC&lt;/p&gt;
&lt;p&gt;用户模式APC运行在用户模式下的目标线程的当前上下文中，且</summary>
      
    
    
    
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
    <category term="笔记" scheme="http://airshelf.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mono注入（一）</title>
    <link href="http://airshelf.github.io/2021/08/11/MonoInjection/"/>
    <id>http://airshelf.github.io/2021/08/11/MonoInjection/</id>
    <published>2021-08-10T17:38:40.000Z</published>
    <updated>2021-10-25T08:09:07.716Z</updated>
    
    <content type="html"><![CDATA[<p>了解Unity的生命周期，是MONO注入的一个基础。</p><p>附上Unity的生命周期图</p><p><img src="/2021/08/11/MonoInjection/image.png" alt="image"></p><p>略微了解上述生命周期后，尝试对其中流程进行注入</p><p>首先创建一个loader类</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">namespace</span> MonoInjectTemplate<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Loader</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> GameObject mGameObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mGameObject<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>HackMain<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">.</span><span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span>mGameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Unload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Object<span class="token punctuation">.</span><span class="token function">Destroy</span><span class="token punctuation">(</span>mGameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再是我们的主类，其中我们的主类继承了MonoBehaviour</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>CodeAnalysis<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">namespace</span> MonoInjectTemplate<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">SuppressMessage</span><span class="token punctuation">(</span><span class="token string">"ReSharper"</span><span class="token punctuation">,</span><span class="token string">"Unity.RedundantEventFunction"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HackMain</span> <span class="token punctuation">:</span> MonoBehaviour    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Hello Little Mono Hacker!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后编译，使用注入器注入MONO</p><p>最终效果如下：</p><p><img src="/2021/08/11/MonoInjection/image2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;了解Unity的生命周期，是MONO注入的一个基础。&lt;/p&gt;
&lt;p&gt;附上Unity的生命周期图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/11/MonoInjection/image.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;略微了解上述生命周期后，尝试对</summary>
      
    
    
    
    
    <category term="游戏" scheme="http://airshelf.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>内核使用APC</title>
    <link href="http://airshelf.github.io/2021/08/09/KernalAPC/"/>
    <id>http://airshelf.github.io/2021/08/09/KernalAPC/</id>
    <published>2021-08-09T15:49:35.000Z</published>
    <updated>2021-10-25T08:09:56.726Z</updated>
    
    <content type="html"><![CDATA[<p>头文件：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> _KAPC_ENVIRONMENT <span class="token punctuation">{</span>    OriginalApcEnvironment<span class="token punctuation">,</span>    AttachedApcEnvironment<span class="token punctuation">,</span>    CurrentApcEnvironment<span class="token punctuation">,</span>    InsertApcEnvironment<span class="token punctuation">}</span> KAPC_ENVIRONMENT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKNORMAL_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN PVOID NormalContext<span class="token punctuation">,</span>    IN PVOID SystemArgument1<span class="token punctuation">,</span>    IN PVOID SystemArgument2    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKKERNEL_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc<span class="token punctuation">,</span>    IN OUT PKNORMAL_ROUTINE<span class="token operator">*</span> NormalRoutine<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> NormalContext<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument1<span class="token punctuation">,</span>    IN OUT PVOID<span class="token operator">*</span> SystemArgument2    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">VOID</span><span class="token punctuation">(</span><span class="token operator">*</span>PKRUNDOWN_ROUTINE<span class="token punctuation">)</span> <span class="token punctuation">(</span>    IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc    <span class="token punctuation">)</span><span class="token punctuation">;</span>VOID <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>    __out PRKAPC Apc<span class="token punctuation">,</span>    __in PRKTHREAD Thread<span class="token punctuation">,</span>    __in KAPC_ENVIRONMENT Environment<span class="token punctuation">,</span>    __in PKKERNEL_ROUTINE KernelRoutine<span class="token punctuation">,</span>    __in_opt PKRUNDOWN_ROUTINE RundownRoutine<span class="token punctuation">,</span>    __in_opt PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">,</span>    __in_opt KPROCESSOR_MODE ApcMode<span class="token punctuation">,</span>    __in_opt PVOID NormalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOLEAN <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>    __inout PRKAPC Apc<span class="token punctuation">,</span>    __in_opt PVOID SystemArgument1<span class="token punctuation">,</span>    __in_opt PVOID SystemArgument2<span class="token punctuation">,</span>    __in KPRIORITY Increment<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体实现：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"header.h"</span></span>VOID <span class="token function">NormalRoutineFunc</span><span class="token punctuation">(</span>IN PVOID NormalContext<span class="token punctuation">,</span>IN PVOID SystemArgument1<span class="token punctuation">,</span>IN PVOID SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">DbgPrintEx</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:NormalRoutineFunc pid: %d\tIRQL: %d!\r\n"</span><span class="token punctuation">,</span> <span class="token function">PsGetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">KeGetCurrentIrql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KeSetEvent</span><span class="token punctuation">(</span>SystemArgument1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">kernelRoutineFunc</span><span class="token punctuation">(</span>IN <span class="token keyword">struct</span> _KAPC<span class="token operator">*</span> Apc<span class="token punctuation">,</span>IN OUT PKNORMAL_ROUTINE<span class="token operator">*</span> NormalRoutine<span class="token punctuation">,</span>IN OUT PVOID<span class="token operator">*</span> NormalContext<span class="token punctuation">,</span>IN OUT PVOID<span class="token operator">*</span> SystemArgument1<span class="token punctuation">,</span>IN OUT PVOID<span class="token operator">*</span> SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">DbgPrintEx</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:kernelRoutineFunc pid: %d\tIRQL: %d!\r\n"</span><span class="token punctuation">,</span> <span class="token function">PsGetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">KeGetCurrentIrql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ExFreePool</span><span class="token punctuation">(</span>Apc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VOID <span class="token function">DriverUnload</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING pReg<span class="token punctuation">)</span><span class="token punctuation">{</span>    PKAPC pApc <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KAPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PKEVENT pEvent <span class="token operator">=</span> <span class="token function">ExAllocatePool</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEVENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEVENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KeInitializeEvent</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> SynchronizationEvent<span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    PETHREAD eThread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">PsLookupThreadByThreadId</span><span class="token punctuation">(</span><span class="token number">1292</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>eThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DbgPrintEx</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:MyProcessId :%d\tIRQL: %d!\r\n"</span><span class="token punctuation">,</span> <span class="token function">PsGetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">KeGetCurrentIrql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> eThread<span class="token punctuation">,</span> OriginalApcEnvironment<span class="token punctuation">,</span>        kernelRoutineFunc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> NormalRoutineFunc<span class="token punctuation">,</span> KernelMode<span class="token punctuation">,</span> <span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BOOLEAN is <span class="token operator">=</span> <span class="token function">KeInsertQueueApc</span><span class="token punctuation">(</span>pApc<span class="token punctuation">,</span> pEvent<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DbgPrintEx</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:Driver APC Queued!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pApc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">KeWaitForSingleObject</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">,</span> Executive<span class="token punctuation">,</span> KernelMode<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DbgPrintEx</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]:APC Executed!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ExFreePool</span><span class="token punctuation">(</span>pEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> DriverUnload<span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内核插入APC效果如下:</p><p><img src="/2021/08/09/KernalAPC/image.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;头文件：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive k</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>IRQL、分页与非分页内存</title>
    <link href="http://airshelf.github.io/2021/08/09/IRQL-NONE-PAGE/"/>
    <id>http://airshelf.github.io/2021/08/09/IRQL-NONE-PAGE/</id>
    <published>2021-08-09T15:46:35.000Z</published>
    <updated>2021-10-25T08:10:22.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IRQL：中断请求级别"><a href="#IRQL：中断请求级别" class="headerlink" title="IRQL：中断请求级别"></a>IRQL：中断请求级别</h3><p>由CPU提供的概念，并且规定，高IRQL的代码，可以抢占（中断）低IRQL的代码的执行过程，从而获得执行机会。</p><p>驱动常见的IRQL即其数值如下：</p><table><thead><tr><th>IRQL</th><th>数值</th><th>描述</th></tr></thead><tbody><tr><td>PASSIVE_LEVEL</td><td>0</td><td>应用层线程以及大部分内核函数处于该IRQL，可以无限制的使用所有内核API，可以访问分页及非分页内存</td></tr><tr><td>APC_LEVEL</td><td>1</td><td>异步方法调用（APC） 或 页错误时处于该IRQL。 可以使用大部分内核API，可以访问分页及非分页内存</td></tr><tr><td>DISPATCH_LEVEL</td><td>2</td><td>延迟方法调用（DPC）时处于该IRQL。 可以使用特定的内核API，只能访问非分页内存</td></tr></tbody></table><p>上表只列出了软件驱动所会使用到的IRQL，并不代表IRQL只有这三个值。不同体系CPU对于IRQL的分级大同小异。</p><h3 id="分页和非分页内存"><a href="#分页和非分页内存" class="headerlink" title="分页和非分页内存"></a>分页和非分页内存</h3><p>在CPU保护模式分页机制开启的情况下，驱动所面对的地址全部都是虚拟地址（线性地址），需要通过页表转换得到实际的物理地址。这个地址的转换过程由CPU完成。</p><p>虚拟地址与物理地址的实际关系是多对一的关系，不同的虚拟地址可以对应着同一个物理地址，当这个情况发生的时候，这个物理地址所存的内容会被操作系统置换到磁盘上。</p><p>所以在WINDOWS操作系统定义的时候，就定义了两种内存类型：分页内存与非分页内存。</p><p><strong>分页内存指的是这些内存可以被置换到磁盘上。</strong></p><p><strong>非分页内存指的是这些内存不可以被置换到磁盘上。</strong></p><h3 id="获取当前IRQL方法"><a href="#获取当前IRQL方法" class="headerlink" title="获取当前IRQL方法"></a>获取当前IRQL方法</h3><p>使用调用函数<code>KeGetCurrentIrql</code>即可获得当前的IRQL</p><p>示例代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ntifs.h></span></span>VOID <span class="token function">DrivUnload</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]: Driver Unloaded!!!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING pReg<span class="token punctuation">)</span><span class="token punctuation">{</span>    KIRQL IRQL <span class="token operator">=</span> <span class="token function">KeGetCurrentIrql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> DrivUnload<span class="token punctuation">;</span>    <span class="token function">KdPrintEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[+]: Driver Loaded!!! Current IRQL:%d\r\n"</span><span class="token punctuation">,</span> IRQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/09/IRQL-NONE-PAGE/image.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;IRQL：中断请求级别&quot;&gt;&lt;a href=&quot;#IRQL：中断请求级别&quot; class=&quot;headerlink&quot; title=&quot;IRQL：中断请求级别&quot;&gt;&lt;/a&gt;IRQL：中断请求级别&lt;/h3&gt;&lt;p&gt;由CPU提供的概念，并且规定，高IRQL的代码，可以抢占（中断）低I</summary>
      
    
    
    
    
    <category term="内核" scheme="http://airshelf.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
    <category term="笔记" scheme="http://airshelf.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>R3 ACP注入</title>
    <link href="http://airshelf.github.io/2021/08/07/R3-apc/"/>
    <id>http://airshelf.github.io/2021/08/07/R3-apc/</id>
    <published>2021-08-07T03:09:34.000Z</published>
    <updated>2021-10-25T08:18:17.044Z</updated>
    
    <content type="html"><![CDATA[<p>注入代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ApcInject.h"</span></span><span class="token keyword">void</span> <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pszText<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> szErr<span class="token punctuation">[</span>MAX_PATH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">wsprintf</span><span class="token punctuation">(</span>szErr<span class="token punctuation">,</span> <span class="token string">"%s Error[%d]\n"</span><span class="token punctuation">,</span> pszText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> szErr<span class="token punctuation">,</span> <span class="token string">"ERROR"</span><span class="token punctuation">,</span> MB_OK <span class="token operator">|</span> MB_ICONERROR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据进程名称获取PID</span>DWORD <span class="token function">GetProcessIdByProcessName</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pszProcessName<span class="token punctuation">)</span><span class="token punctuation">{</span>    DWORD dwProcessId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PROCESSENTRY32 pe32 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    HANDLE hSnapshot <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    BOOL bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">RtlZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pe32<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pe32<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取进程快照</span>    hSnapshot <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPPROCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> hSnapshot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"CreateToolhelp32Snapshot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dwProcessId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取第一条进程快照信息</span>    bRet <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32First</span><span class="token punctuation">(</span>hSnapshot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>bRet<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取快照信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">lstrcmpi</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">,</span> pszProcessName<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dwProcessId <span class="token operator">=</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历下一个进程快照信息</span>        bRet <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Process32Next</span><span class="token punctuation">(</span>hSnapshot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dwProcessId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据PID获取所有的相应线程ID</span>BOOL <span class="token function">GetAllThreadIdByProcessId</span><span class="token punctuation">(</span>DWORD dwProcessId<span class="token punctuation">,</span> DWORD <span class="token operator">*</span><span class="token operator">*</span>ppThreadId<span class="token punctuation">,</span> DWORD <span class="token operator">*</span>pdwThreadIdLength<span class="token punctuation">)</span><span class="token punctuation">{</span>    DWORD <span class="token operator">*</span>pThreadId <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    DWORD dwThreadIdLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DWORD dwBufferLength <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    THREADENTRY32 te32 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    HANDLE hSnapshot <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    BOOL bRet <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 申请内存</span>        pThreadId <span class="token operator">=</span> new DWORD<span class="token punctuation">[</span>dwBufferLength<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pThreadId<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"new"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">RtlZeroMemory</span><span class="token punctuation">(</span>pThreadId<span class="token punctuation">,</span> <span class="token punctuation">(</span>dwBufferLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取线程快照</span>        <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">RtlZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>te32<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>te32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        te32<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>te32<span class="token punctuation">)</span><span class="token punctuation">;</span>        hSnapshot <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPTHREAD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> hSnapshot<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"CreateToolhelp32Snapshot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取第一条线程快照信息</span>        bRet <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Thread32First</span><span class="token punctuation">(</span>hSnapshot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>te32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>bRet<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取进程对应的线程ID</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>te32<span class="token punctuation">.</span>th32OwnerProcessID <span class="token operator">==</span> dwProcessId<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pThreadId<span class="token punctuation">[</span>dwThreadIdLength<span class="token punctuation">]</span> <span class="token operator">=</span> te32<span class="token punctuation">.</span>th32ThreadID<span class="token punctuation">;</span>                dwThreadIdLength<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历下一个线程快照信息</span>            bRet <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Thread32Next</span><span class="token punctuation">(</span>hSnapshot<span class="token punctuation">,</span> <span class="token operator">&amp;</span>te32<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回</span>        <span class="token operator">*</span>ppThreadId <span class="token operator">=</span> pThreadId<span class="token punctuation">;</span>        <span class="token operator">*</span>pdwThreadIdLength <span class="token operator">=</span> dwThreadIdLength<span class="token punctuation">;</span>        bRet <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> bRet<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pThreadId<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            delete<span class="token punctuation">[</span><span class="token punctuation">]</span>pThreadId<span class="token punctuation">;</span>            pThreadId <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bRet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// APC注入</span>BOOL <span class="token function">ApcInjectDll</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pszProcessName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pszDllName<span class="token punctuation">)</span><span class="token punctuation">{</span>    BOOL bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    DWORD dwProcessId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DWORD <span class="token operator">*</span>pThreadId <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    DWORD dwThreadIdLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    HANDLE hProcess <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hThread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PVOID pBaseAddress <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PVOID pLoadLibraryAFunc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    SIZE_T dwRet <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dwDllPathLen <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">lstrlen</span><span class="token punctuation">(</span>pszDllName<span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据进程名称获取PID</span>        dwProcessId <span class="token operator">=</span> <span class="token function">GetProcessIdByProcessName</span><span class="token punctuation">(</span>pszProcessName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">>=</span> dwProcessId<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据PID获取所有的相应线程ID</span>        bRet <span class="token operator">=</span> <span class="token function">GetAllThreadIdByProcessId</span><span class="token punctuation">(</span>dwProcessId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pThreadId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwThreadIdLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> bRet<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 打开注入进程</span>        hProcess <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwProcessId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> hProcess<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"OpenProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在注入进程空间申请内存</span>        pBaseAddress <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dwDllPathLen<span class="token punctuation">,</span> MEM_COMMIT <span class="token operator">|</span> MEM_RESERVE<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pBaseAddress<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"VirtualAllocEx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 向申请的空间中写入DLL路径数据 </span>        <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pBaseAddress<span class="token punctuation">,</span> pszDllName<span class="token punctuation">,</span> dwDllPathLen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwRet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dwRet <span class="token operator">!=</span> dwDllPathLen<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"WriteProcessMemory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取 LoadLibrary 地址</span>        pLoadLibraryAFunc <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token string">"kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pLoadLibraryAFunc<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ShowError</span><span class="token punctuation">(</span><span class="token string">"GetProcessAddress"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bRet <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历线程, 插入APC</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwThreadIdLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 打开线程</span>            hThread <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">OpenThread</span><span class="token punctuation">(</span>THREAD_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> pThreadId<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hThread<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 插入APC</span>                <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">QueueUserAPC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PAPCFUNC<span class="token punctuation">)</span>pLoadLibraryAFunc<span class="token punctuation">,</span> hThread<span class="token punctuation">,</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>pBaseAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关闭线程句柄</span>                <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                hThread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        bRet <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放内存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>        hProcess <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pThreadId<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span>pThreadId<span class="token punctuation">;</span>        pThreadId <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bRet<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向explorer.exe注入，并编写测试DLL代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span> HMODULE hModule<span class="token punctuation">,</span>                       DWORD  ul_reason_for_call<span class="token punctuation">,</span>                       LPVOID lpReserved                     <span class="token punctuation">)</span><span class="token punctuation">{</span>    STARTUPINFO si <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    PROCESS_INFORMATION pi <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    si<span class="token punctuation">.</span>cb <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PROCESS_INFORMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token function">CreateProcessA</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> CREATE_NEW_CONSOLE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>si<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token punctuation">:</span>    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><img src="/2021/08/07/R3-apc/image.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注入代码如下：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directiv</summary>
      
    
    
    
    
    <category term="代码" scheme="http://airshelf.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
    <category term="功能" scheme="http://airshelf.github.io/tags/%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
</feed>
